Contact Scott Heston for more information about this guide. 

== About this Guide  ==

This wiki entry is to help you understand the flow of EMADE source code and how you can modify it yourself! In addition to this wiki, files are also commented according to Sphinx autodoc'ing standards, which you should follow if you add or change code. If you're looking to run your first optimization problem with emade, check out the [[Guide to XML Emade Input]] or the [https://github.gatech.edu/emade/emade GitHub readme].   

== XML Input ==

The problem definition for any GP in EMADE is input as an XML file. Example XML files are located in the templates folder. Information defined in the XML file includes the objectives, datasets, functions for mutation, crossover, and evaluation, as well as connection information for the SQL database.

== didLaunch.py ==

The file run from the command line is didLaunch.py. Reading through this file will help you understand the command-line arguments passed into EMADE. If a previous database is provided, it is loaded from the pickle file. If not, the problem definition is read from an XML file.   

== database_tree_evaluator.py ==

This file is used for debugging a specific individual. It pulls the individual from the database and reruns its evaluation so that you can see any errors that occur. 

== data.py==

Methods to read in data from standard formats are in data.py (e.g. .csv, .gzip, .jpeg, .gz). The file is provided in the XML and the type of file is deduced from the file ending within data.py. This file also implements the data types used in the main loop, GTMOEPDataInstance and GTMOEPDataPair. 

There are unit tests in /src/UnitTests/data_unit_test_v3.py for this file.  

== gp_framework_helper.py ==
This file adds all primitives and terminals to the main evolutionary loop/DEAP toolkit. If you want to implement your own terminal or primitive, you will need to associate it here. 

== launchGTMOEP.py ==

This file parses the XML configuration file. These configurations are saved into three python dictionaries to be later passed to a master subprocess that will run the main evolutionary loop and worker subprocesses that will evaluate individuals. These dictionaries are also saved as a binary data file with the pickle library with a name determined by the original process id bound to the launchGTMOEP.py process. This file can be thought of as the preprocessing for didLaunch.py, which is the main driver script for both the master and worker processes. 

== gtMOEP.py ==
This file contains the main evolutionary loop for both the master and workers. The current non-dominated front, current-generation individuals, and statistics are saved into the database file here as the master algorithm progresses, and can be examined directly with a database client such as sqlite3. Individuals are passed between the master and workers through the database, and each instance of gtMOEP.py runs as a separate process so that resource management can be taken care of by the native operating system. 

== visualization.py ==
You can create analyses of any objective function over generations by supplying a database file to statistics.py. This function is demonstrated [https://docs.google.com/presentation/d/1BNACBKEjW3LcL9nxXnwRLX00RMB6gQSWdhmSlEjirCY/edit?usp=sharing here]. 

== methods.py / selection_methods.py / signal_methods.py /feature_selection_methods.py / general_functions.py ==
These files implement methods to be used as primitives. 

There are unit tests in /src/UnitTests/machine_learning_methods_unit_test.py for this file.

== gp_framework_helper.py == 
This file adds primitives and terminals to the DEAP toolbox for use in GTMOEP. Note that by default EMADE uses a large amount of functions.

== FAQ ==
1) Where is the EMADE source code? You can find the EMADE source within the /src/GPFramework folder. 

2) Why are my changes to source code not affecting EMADE? When you run any of the files from the command line, code is imported from the installed GPFramework in your /lib folder. Every time you want to recompile your code into your library, reinstall GPFramework using the scripts in the GitHub (reinstall.sh for unix or reinstall.bat for Windows).

3) How can I access the VIP servers for continues running of master algorithms? You can ssh into emade.vip.gatech.edu from the campus VPN using your tech userid after a features team member adds you to the list. 

4) How can I get started with EMADE? [https://github.gatech.edu/emade/emade EMADE] implements all the key functions of genetic programming (GP). If you are still unfamiliar with GP, check out the [https://github.gatech.edu/emade/emade/blob/master/notebooks/Lab%201%20-%20Genetic%20Algorithms%20with%20DEAP.ipynb first lab] before trying to follow the EMADE process.

5) Why is It necessary to share a pickled Python data object to each of my workers? Currently, problem definitions are only parsed from the XML when the database is first created. All the dictionaries that define the problem are then pickled for later use (e.g. when workers are spawned).