{{AAD_navbar}}
== Team Member ==
[[files/Photo Of Aaron McDaniel.jpg|thumb|167x167px]]'''<big>Name: Aaron McDaniel</big>'''

'''<big>Email: amcdaniel39@gatech.edu</big>'''

'''<big>Cell Phone: 770-712-2986</big>'''

'''Sub-Team: [[Automatically Defined Functions]]'''

'''Most recent project:''' [[ADF: Differential Fitness|Differential Fitness]]

'''EMADE Fork: https://github.gatech.edu/amcdaniel39/Aaron_emade'''

=== Presentations:  ===
* [https://drive.google.com/drive/folders/1KYg8yE7XwSo3Jofx2GdsVt3U4l8Da4sJ '''Fall 2019''']
* '''[https://drive.google.com/drive/folders/10ishn-Xf3zzC8OvoaFCjf6K-Q2PPc5Uc Spring 2020]'''

== 4/20/2020 ==
week from today collect notebooks

=== Presentations ===
'''Research Fundamentals'''
* Goal: reduce bloat
* Bloat Metric: size diff / fitness diff       I really like this as an overall metric. It would be interesting to look at this value for every individual in the population
* Speciation: finds similarities between node count and tree depth to group individuals
** Use speciation in selection to protect endangered species
* I think slide 11, had very statistically significant result for hyper-volume and bloat
* Slide 14: neat cross over consistently was decreasing. that is cool. I wonder how they compare at gen 60?

* Pace can handle 8 simultaneous runs in 8 hours, 30 gens
** Also without datasets, git, and unit tests, EMADE goes from 11GB to 100MB
'''NLP'''
* Activation functions: ReLu, ELU, SeLU, Linear
* gloVe encondings are pretty cool
* Multiple catagory labelling is a very interesting framework

== 4/19/2020 ==

=== Update ===
* I isolated the issues to the refactor code. I think maybe that my update to the contract ADF code broke it
* I had 2 runs on my local from the [https://github.gatech.edu/gwang340/emade/tree/feature/DifferentialFitness feature/DifferentialFitness] branch, but now I am moving to the [https://github.gatech.edu/gwang340/emade/tree/feature/DifferentialFitness_NoRefactor feature/DifferentialFitness_NoRefactor] branch.

== 4/16/2020 ==

=== Subteam Meeting ===
* I am currently debugging issues on GCP with the differential fitness code. I do have successful local runs though.
* The ADF selection runs on GCP are going well. So far there are 2 successful primitive analysis runs, with a third in progress.

== 4/13/2020 ==

=== Subteam Meeting ===
* I refactored how information is passed around different methods in adfs.py. Now we have objects instead of specifically indexed lists: [https://github.gatech.edu/gwang340/emade/commit/56c05711ceca86d36484856af2b228086c83a0c4 git commit]
* Katie finished her Differential Fitnes calculating code. I realized before that the individuals from the database are not the same type as the individuals in the mating pool.  mating pool individuals have the syntax of ind.fitness.values and database individuals have the syntax of ind.pickle.fitness.values
* I added Katie's code to the find_adfs function. We now require individuals to have a positive differential fitness for their subtrees to become adf candidates. [https://github.gatech.edu/gwang340/emade/commit/74c0ffcdbf72f8a87080eac6d03fa657fe111639 git commit](I just noticed I changed the line endings. I will change them back)
* I also started a local run for our code which is running without error, and I finished a local run for the [[ADF: Selection Methods|adf selection team]][[ADF-Primitive-Analysis|'s]] code.

== 4/06/2020 ==

=== Subteam Meeting ===
* Differential fitness project is broken into 3 parts. I finished my code for querying the database for parents.
* I am also going to refactor the information being stored in population_info into a class
* I added the main meeting bluejeans link to the [[Automated Algorithm Design|EMADE wiki]].
* I added all of the project page links and bluejeans meeting links to the [[Automatically Defined Functions|ADF wiki]].

== 3/23/2020 ==

=== Subteam Meeting ===
We introduced everyone and decided to have some onboarding process for new students since there are 7 of them and 4 returning students. We will be having a session on Wednesday at 4:30 PM. i will be working on detailed descriptions of the projects we want to do. These projects include
* [[ADF: Differential Fitness]]
* [[ADF: Selection Methods]]
* [[ADF-Evolving-ADFs]]
* [[ADF: Entropy Informed ADF Generation]]
* [[ADF-Primitive-Analysis]]
We will also be working on a [https://docs.google.com/presentation/d/1sDmxdZmbImsM4Ke4gE5EYrINyj_S9Jf7c21Xs4bEsBM/edit#slide=id.p google slides presentation] as well.

== 3/9/2020 ==

=== Presentations ===

==== Bootcamp 1 ====
* ML: 0.1721
GP AUC: 0.149
* EMADE: 0.00267
* No way that emade score is right

=== Bootcamp 2 ===
* Preprocessing was interesting
* Slide 1 (11)

==== NLP Normal ====
* Slide 5: how more than 1 x-axis?
* Very long presentation

==== Bootcamp 3 ====
* Long ADABoost explination

==== Bloat ====
* Bloat metric?
* Time kill issue
* What is speciation

==== ezCGP ====
* Data augmentation with data generation
* pg 10 are those training values? Where are validation accuracies?

==== Bootcamp 4 ====
* eh

==== Bootcamp 5 ====
* too tired

==== NLP Time Conflict ====
* Pac issues are so annoying

==== Presentation Takeaways ====
We are here to learn HOW to research
* We should site sources
* We should make hypotheses before we get results
* We should try to explain our results
* We should clearly explain solutions and situations to other people
ADFs should maybe try using multiple machines connected to the database

== 3/5/2020 ==

=== Team Meeting ===
assigned sections of the presentation and collectively discussed slides

after meeting I finished the code for looking at adf and population primitives by frequency

== 3/2/2020 ==

=== Class meeting ===
Presentation tips
* Page numbers
* Good context for graphs

=== Team Meeting Notes ===
* Mutating ADFs is a good future goal
* When looking at primitives in ADFs we need to account for the type of learner.
* A string parsing method to count the primitives of each type in ADFs and in individuals would be useful
TODO:

Make a method to parse an individual's tree or an ADF's expression and return each primitive and its frequency for data visualization

== 2/29/2020 ==

=== Hackathon ===
Reading Discovery of Subroutines in Genetic Programming, by Justinian P. Rosca and Dana H. Ballard. Getting good ideas
* Use differential fitness as heuristic: the increase in fitness between best parent and individual
** Will require dictionary mapping individuals to their parents, but memory requirement wouldn't be all that small if we just use hashes
** Good indicator of a new useful subtree being evolved
* Population entropy statistic to inform number of subroutines to create
** Split individuals by their most common ADFs, with ties being their own group
** More diversity would require more new ADFs
** Less diversity would require less new ADFs
* Tracking primitive utility by averaging fitness of all individuals using the primitive
** This would be useful for deleting ADFs, which would require us to edit individuals after they are added to the DB
* Using more general ADF structure that isn't necessarily a full tree
Talked about what we need to look at in our current data:
* Histogram of primitives in ADFs
* % of population conataining ADFs

== 2/24/2020 ==

=== Class Meeting ===
* Hackathon this weekend
Team Meeting
* Looking at average AUC at the last generation, we got a P-Value of 0.62 (0.95 is statistically significant and good)
* We want to look at more metrics, like AUC slope, # of gens to a specific AUC cut-off value, and 
* Also looking at size of individuals without counting internal ADF structure would be a good sanity check.

== 2/17/20 ==

=== Class meeting ===
* The hackathon is coming up
* Notebooks will be collected Friday
* Presentations on 3/09
'''Update:'''

I finished with runs for our first experiment. I will upload the sql dumps to the bucket so that other people can get those files.

SQL dumps located at [https://console.cloud.google.com/storage/browser/emade-vip-aaron-mcdaniel/sql_dumps?project=round-mark-159321 gc://emade-vip-aaron-mcdaniel/sql_dumps]

'''todo:'''

Take the relevant changes from [https://github.gatech.edu/gwang340/emade/pull/3 Aryender's PR for intelligent ADFs] and put them on a [https://github.gatech.edu/gwang340/emade/tree/intelligent_adfs new branch].

Test the changes and put the working code on GCP for more runs.

'''goals:'''

Be able to run tests quick enough that we do not run out of data to analyze. Ideally we won't have to take breaks to wait for a trial to finish.

== 2/6/20 ==

=== Team Meeting ===
Update: 
* Multiple runs have been made, with sql dumps located on the bucket. Also noticed that individuals will sometimes go for an absurd amount of time before finishing their evaluation, i.e. 2 days. 
* I also added a quick guide for GCP runs and data dumps with Google cloud. It is on the Team wiki page.
* I found out that deleting a single lone from the dumps from older versions of mysql make it compatible to load into up-to-date versions of mysql workbench
** Super User post: https://superuser.com/questions/906843/import-mysql-data-failed-with-error-1839
** Summary: delete the line setting the  Global.gtid_purged value
*** <code>SET @@GLOBAL.GTID_PURGED='****************';</code>
todo: Run Viz on the runs to see how they did

goals: Be able to understand what is going on with ADFs in a normal run, as well as why individuals are hanging for so long.

== 1/30/20 ==

=== Team Meeting ===
Update: we fixed the memory issues like Jason suggested so we can do longer runs. I started a GCP run as well that uses the changes.

todo: finish the run, export the sqldump onto the bucket, and run viz on the sql dump to see how the ADFs performed.

goals: Get more runs and visualize them using Viz's code. I also need to get Viz's code to run on my computer.

== 1/23/20 ==

=== Team Meeting ===
Update: I didn't seed the database correctly before the previous GCP run. Also Jason told me how to do consecutive runs. YOU MUST KILL THE PREVIOUS JOB.

Kill your jobs with the command:
 scancel -u WHATEVERYOURUSERNAMEISHERE
todo: retry another GCP run.

Goals: Get a stable and consistent way to do trial runs for EMADE 

== 1/20/20 ==
- MLK

== 1/16/2020 ==
Team Meeting

Update: ran Emade on GCP with weird result. Then I couldn't do any successive runs.

Todo: Find out what went wrong with the GCP run

Goals: Get a stable and consistent way to do trial runs for EMADE

== 1/13/2020 ==

=== Class Meeting ===

==== Metrics for test ====
* Average AUC
* AUC Slope
* gens to threshhold
* compute time with caching

== 1/9/2020 ==

=== Team Meeting ===
* Caught up on todo's
* Decided to test ADFs on vs. ADFs off, then fitness informed ADFs vs non-informed ADFs

== 1/6/2020 ==

=== First Day of Class ===
* Make TODOs
* GCP is ready
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Get a benchmark run in GC
|In Progress
|1/6/2020
|
|}

== Fall 2019 Semester Reflection ==
We were not explicitly told to reflect on the semester, but I remember doing that last fall, so I'll do that again.

This semester the ADF team and I learned about a new concept, researched implementations, and worked tirelessly to actually get the thing to run.

At certain points I thought we would not be able to get our ADFs working by the end of this semester, but the entire team pulled through and we met our goals.

I specifically ended up contributing a lot for ADFs, including:
* Generation of ADFs
* Fixing seeding
* Investigating our NoneType issue
* Working with Jason to correctly handle the primitives in the worker algorithm.
I also think I ran EMADE the most, which is why I found a lot of bugs in our code including:
* Not accounting for shifting indices when removing nodes to insert ADFs into individuals
* Not properly adding individuals with ADFs inserted into them into the DB
If I were asked what grade I deserve I would say that I deserve an A, because I don't think that we would have met our goals without my contributions to the team. I would say the same thing about Benson, Joel, and Gabe.

Also I was very pleased that both of the first semester students managed to make actual contributions before the end of the semester.

== 11/27/2019 ==

=== Personal Notes ===
I met with Joel. He has been looking very hard into this ADF issue and he fixed it.

IDK what he did, but the individuals evaluate now. Now we just need some benchmarking runs for the presentation and to actually make the presentation.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Benchmark Runs
|Completed
|11/27/2019
|12/1/2019
|-
|Make Presentation
|completed
|11/27/2019
|12/2/2019
|}

== 11/25/2019 ==

=== Team Meeting Notes ===
Jason Met with us and after an extra hour and a half we found the issue with our ADFs. 

Unfortunately our more selective ADF changes make EMADE runs last a long time before ADFs get used.

They we added to A pset in the worker, but not ALL of the psets used by the worker threads. 

We fixed this by passing a reference to the correct pset for all evaluation methods.We weren't adding every ADF to the DB though so we got some errors on the individuals.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Get ADF individuals to evaluate correctly
|Completed
|11/25/2019
|11/27/2019
|}

== 11/24/2019 ==

=== Hackathon/Personal Notes ===
After the hackathon we got many features to work. We are only selecting ADFs from valid individuals. We have descriptive ADF names. We contract ADFs correctly and we handle overlapping ADFs correctly. This is a huge step forward. We still have a few bugs though.
* ADFs are not being inserted into the valid individuals correctly in the DB. The only explination I can think of is that the individual is being changed locally, which effects its offspring during mating, but not the original individual in the DB.
* Our ADF names are not guaranteed to always be unique. Our ADF id number resets each run, and with reuse enabled we can get ADFs with the same name. This could cause errors. We should probably look at existing ADFs before assigning the ADF ID an initial value. However it will be fine for a few runs, but it will eventually fail.
* We're still getting our "NoneType not subscriptable error" even though the ADFs are in the workers primitive set and the lambda string being evaluated is valid.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Get ADF primitives to evaluate correctly
|Completed
|11/10/2019
|11/25/2019
|}

== 11/21/2019 ==

=== Team Meeting Notes ===
We spent the meeting merging all of the outstanding PRs to combine all of our fixes. I stayed late and did all of the merge conflicts. Hopefully this works and fixes our ADF evaluation problem.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Get ADF primitives to evaluate correctly
|Completed
|11/10/2019
|11/25/2019
|}

== 11/18/2019 ==

=== Class Meeting Notes ===
Decided to have a code freeze on 11/22/19 for the sake getting a full run going and having SOMETHING that we can use to evaluate our ADF performance.

We will most likely have to restrict our features as well. ADFs are still not evaluating properly. We are ho[ping that if we fix how ADFs are added to individuals we will solve this issue.

Right now we are probably njot adding ADFs correctly and are deleting the wrong nodes when getting rid of the child nodes.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Get ADF primitives to evaluate correctly
|Completed
|11/10/2019
|11/25/2019
|}

== 11/11/2019 ==

=== Class Meeting Notes ===
For some reason the ADF primitives will not evaluate. We can get normal individuals to evaluate fine, but not individuals with ADFs.

Austin said that the primitives are probably not being added to the PSET correctly, but they are in the mapping.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Get ADF primitives to evaluate correctly
|Completed
|11/10/2019
|11/25/2019
|}

== 11/10/2019 ==

=== Personal Notes ===
I fixed seeding, evaluation, and re-added the .gitignore for all of the build and run-time generated files in EMADE.

Seeding: I had the wrong text in the seeding files. All individuals needed to be of the form "Learner()" 

Evaluation: We were measuring size by counting all non-adf nodes in all the trees. I decided to just count every node in the main tree. We will need to fix this by including the size of the ADFs as well.

.gitignore: Ignores the build and dist folders as well as all of the .out, .err, hypervolume, and pickle files that EMADE automatically produces.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Get ADF primitives to evaluate correctly
|Completed
|11/10/2019
|11/25/2019
|}

== 11/4/2019 ==

=== Class Meeting ===
For some reason the seeded individuals aren't valid. There is some check for a Learner node, but Austin said that gets added automatically. So I will look at the seeding_from_file.py script,
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Test ADF primitives with Seeded run
|Completed
|10/31/2019
|11/10/2019
|}

== 10/31/2019 ==

=== Team Meeting Notes ===
I fixed seeding from file. It updates the database now. There was an issue with the connection string in seeding_from_file.py. The string needs to start with "mysql+pymysql"
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Test ADF primitives with Seeded run
|Completed
|10/31/2019
|11/10/2019
|}

== 10/28/2019 ==

=== Class Meeting Notes ===
Joel and I got ADF primitives to register inn the PSET without error. Now we need seeding to work so that we can tell if they work correctly.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Get seeding to work
|Completed
|10/28/2019
|10/31/2019
|}

== 10/24/2019 ==

=== Team Meeting Notes ===
My DB won't work for seeding. There is some DB specific connection issue. Gabe will try on his. My goal is to have a seeded database to run on titanic without having to wait a week for valid individuals to pop up.

== 10/21/2019 ==

=== Presentation notes ===

==== subteam 1 ====
* 15 gens
* 2d AUC 0.2

==== subteam 3 ====
* reuse?
* 19 Gens
* Worker error gen 19?
* Ignoring objectives? Just for visualization?

==== EZCGP-DEAP ====
* Cartesian GP
* Parallelization: MPI (Message Passing Interface)
* Parallelization looks so cool

==== Subteam 2 ====
* Feature sets: Fclass, sex, age, sibsp
* 3D pareto front.
* EMADE -> 0.1722

==== APE ====
* Automate preprocessing

==== NLP ====
* Stemming Vs Lemmantization
* Stemming pure removal or account for tense: ran vs run????
* Summarization -> unsupervized
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Same Task from Last week, making ADF primitives 
|Completed
|9/30/2019
|10/28/2019
|}

== 10/19/2019 ==

=== Hackathon Notes ===
Tested our ADF primitives, but they didn't work correctly. Jason was helpful when he mentioned how to add them to the PSet correctly.

He also told us how to seed the database so we can get valid individuals. We couldn't get seeding to work at the hackathon though.

Donuts were good and smashbros was fun. 10/10 enjoyed this idea.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Same Task from Last week, making ADF primitives 
|Completed
|9/30/2019
|10/28/2019
|}

== 10/06/2019 ==

=== Personal Notes ===
I don't think we can turn an ADF into a primitive without some intermediate function to evaluate ADFs such that it can take sequential inputs. I am trying to just overwrite the primitive.seq string, but I don't think that this will be evaluated correctly by deap because it isn't in the expected format.

There appears to be some [https://deap.readthedocs.io/en/0.7-0/api/gp.html#deap.gp.evaluateADF EvaluateADF] function that will create a lambda expression for an ADF, but I can't find it in the Repo.

== 10/7/2019 ==

=== Class Meeting Notes ===
* GCP is up for instanced SLURM clusters.
* Hack day on the 19th in the afternoon
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Same Task from Last week, making ADF primitives 
|Completed
|9/30/2019
|10/28/2019
|}

== 10/3/2019 ==

=== Team Meeting Notes ===
We set out to finish our ADF generation process and actually run EMADE with our generated code. We started out by discussing our progress and then we made a [https://github.gatech.edu/jye72/emade/pull/15 PR] with both [[Notebook Gabriel Qi Wang|Gabrial Wang]]'s method for gathering relevant information from the population and my method for using that data to create ADFs. We then began a review and learned/decided on some stuff:
# We decided the population information would be of the form: Dict[str, Dict[tuple, List[tuple[int, int]]]], where all strings are the names of nodes. (The tuple is made of strings)
# I learned that in order to make an ADF into a primitive we need to define a function for it. We cannot rely on using its component nodes, or else we cannot create a primitive object.
# I also learned that I can use the [https://thepythonguru.com/python-builtin-functions/eval/ eval function] to evaluate string encoded lambda functions. This is how the lambda strings for ADFs are used by deap.

Since I figured out on 9/30 how to find inputs and outputs of Primitives using their name, I only need to format these inputs and outputs into a lambda string for a proper function to create primitives with. This will be the product of the Generate ADF function.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Same Task from Last week, but Now I know to use
Lambda strings that are usable by the eval function
|Completed
|9/30/2019
|10/28/2019
|}

== 9/30/2019 ==

=== Team Meeting Notes ===
Scrums did well. Meeting up with bloat team

Discussed Overall approach, we concluded that our population parsing to generate ADFs will be done by Master Algorithm and then added to the database and retrieved by the worker algorithms
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Create actual usable ADF primitives from Frequency information on 
nodes and their children. 
|Complete
|9/30/2019
|10/28/2019
|}

=== Personal Notes ===
Tasked WithMaking ADFs: 
* gp.add_primitive shows how primitives are stored. Look at ._add() use of mapping to find the type
* Construct ADFs using Gabe's strings to create an actual ADF primitive
Mapping Objects and Types:
* Primitive: contains contains name, arity, args, and ret information
** Formatted into human readable format. with format method, returns string of form "name(arg1, arg2, ...)"
* PrimitiveSetTyped: contains information mapping primitives as a function. Has inputs and outputs. Includes a list of primitives (.primitives)
** Primitives are made of inputs, outputs, and name info
** Name info is the key in PrimitiveSetTyped.context dictionary to get to the expression for the primitive
** Can use self.pset.mapping[name] for inputs and outputs information
** Can use self.pset.context[name] for executable expression information
* PrimitiveTree: in gp.py and is an executable expression comprised of nodes. Will most likely be the expression for an ADF
** Only need a pre-order list of nodes and terminals to create. 
* Terminal: 0 arity node for primitive trees. Has an arity function and a value
'''Conclusion:''' I should be able to get all of the information to create a preorder list of primitives as long as Gabriel's node frequency information contains the names of the primitives.

== 9/23/2019 ==

=== Class Meeting Notes ===
Amazon Credits have been awarded, and we have received Google Cloud credits that will be set up soon.
* Amazon credits can work with new aliases for Amazon

=== Team Meeting notes ===
Create individuals from a dictionary of dictionaries of lists

How are individuals born? The stork? Constructor? DEAP.Compile?

We decided to tweak our algorithm to ONLY produce sub-trees already in the population. I need to update my method for that.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Create an updated  ADF generation algorithm using 
Dict<Dict<List<Tuple>>>
|Complete
|9/23/2019
|9/25/2019
|}

== 9/16/2019 ==

=== Class Meeting Notes ===
We found out that T-Priori has an issue with preserving order of child nodes, which is very important. It may return the set {A, B} but there is no guarantee of which node is child one and which is child two. We decided that while not optimal, we can simply use frequency as a metric for which connections are good. This way we can tell the frequency of each node type being at each child index for each node type in the primitive set. It will still technically use A-Priori, because A-Priori with one length transactions and one length bundle sizes does degenerate into counting frequency. However we are a little disappointed that we aren't really using any special algorithms. This may turn out badly, but we will just have to see how it performs.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Implement Code for candidate ADF generation 
given specific information about the population
|Complete
|9/16/2019
|9/19/2019
|}

== 9/12/2019 ==

=== Sub-Team Meeting Notes ===
[https://www.hackerearth.com/blog/developers/beginners-tutorial-apriori-algorithm-data-mining-r-implementation/ A-Priori] blog description described support, confidence, lift, and conviction being used to define association rules. Looks like a simple way to find groupings.

We discussed possible ways to use A-Priori to find sub-trees as ADF canditates for the ADF pool.

Many graph based A-Priori examples we found were complicated and required custom implementations of the A-priori algorithm.

I came up with the idea of [[T-Priori]] and we will pitch it to Jason on Monday.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Pseudocode and diagrams for [[T-Priori]] 
|Complete
|9/12/2019
|9/14/2019
|}

== 9/9/2019 ==

=== Team Meeting Notes ===
We should sign up for help-desk during our meetings.

Sub-Team Meeting Notes
* We need to learn more about the [https://www.hackerearth.com/blog/developers/beginners-tutorial-apriori-algorithm-data-mining-r-implementation/ Apriori Algorithm], which we will discuss Thursday. Gabe and Joel will handle that and explain it to the group
* We also need EMADE running to verify that code changes work. Ben and I will handle that.
** I can enter my SQL database with command msql -u guest -p
** Password is 'password'
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Run EMADE
|Complete
|9/9/2019
|9/10/2019
|-
|Read A-priori Paper
|Complete
|9/9/2019
|9/11/2019
|-
|
|
|
|
|}

== 9/5/2019 ==

=== Sub-Team Meeting Notes ===
We met with Jason about our ideas for implementing ADFs. Team notes are in the wiki: [[Automatically Defined Functions#Thursday.2C Sept 5th 2019]]

Jason mentioned that we should focus on the quantifiable aspects of the project. So here are some descriptions of quantifiable things:

'''ADF Individual Performance (direct comparison)''': We can directly compare ADFs with the same inputs and outputs by swapping them in individuals and seeing how they affect fitness. I would like to use the pareto-elitism approach described in sub-team wiki on [https://vip.gatech.edu/wiki/index.php/Automatically_Defined_Functions#Thursday.2C_Aug_29th_2019 Thursday, August 29th].

'''ADF Individual Performance (indirect comparison)''': ADFs that are not swappable are not directly comparable in their utility, however we can look at how individuals with them in the population perform. One way is to use what I will call relative-frequency where we compare the number of individuals in the top 50% with an adf to individuals in the bottom 50% with the ADF. the quotient #top/#bottom is a good measure to compare ADFs which controls for overall frequency. (so we don't favor more numerous ADFs)

'''Evaluation of ADF Process:''' We expect ADFs to improve on convergence time for EMADE, so we will evaluate the ADF effectiveness in EMADE by averaging the hyper-volume of the pareto-front for each generation, essentially adding a time axis to the volume calculation. We will run EMADE with our ADFs for N generations and then run the old EMADE ADF structure and compare the average pareto-front hyper-volume.
{| class="wikitable"
!Task
!Status
!Date Assigned
!Date Completed
|-
|Flatten ADFs
|Complete
|9/8/2019
|9/10/2019
|-
|Store ADFs in ADF pool instead of pset
|Complete
|9/8/2019
|9/10/2019
|-
|
|
|
|
|}

== 9/4/2019 ==

=== Personal Notes ===

==== Rant on Good Coding Practices ====
I was reading through GTMOEP.py to find out how and where ADFs are used and I found some coding practices that annoyed me. I'm sure that they were written when the project was much smaller and good coding practices weren't a concern, but they are now. Here are a few things I found.
# '''Iterating through dictionaries.''' Many times when iterating through dictionaries i saw the line "for key in dict" which is faster than using "for value in dict.keys()" because it uses an iterator instead of iterating through the keys to return a list, but if you are just going to use the key to get the values then just iterate through the values. A fast way to do this is with "for value in dict.itervalues()"
# '''Variable names.''' Short variable names are great, but descriptive variable names are better. NEVER SACRIFICE CLARITY FOR BREVITY. A good rule of thumb is to only use abbreviations and acronyms that make sense out of context. Otherwise it may make sense to you but it will just confuse others.
# '''Comments.''' Your comments should be clear and descriptive. A note to yourself for later is fine, but you should go back and write the comment so that everyone will understand it. Definitely don't include  abbreviations and acronyms unless you are defining or explaining them.
# '''General iteration efficiency.''' It is hard to spot sometimes, but you should always iterate in the most efficient way possible. If it makes your code harder to read then just add a clear comment describing what you are doing. One thing to look out for is many iterations through the same collection when they can be combined into a single loop.
# '''Always code as if the [person] who ends up maintaining your code will be a violent psychopath who knows where you live.''' Thanks to git and this wiki they might actually be one.
#* I always see people attributing this quote to James Woods in 2010, but I found a [https://groups.google.com/forum/#!topic/comp.databases.pick/x6OIdWnfM1c%5B1-25%5D google group with the quote in 1994]. (just CTRL+F the quote)

==== Points of Interest for ADFs ====
* The GTMOEP.my_string() method shows how we can use the 'adf_' prefix on a primitive name to identify an ADF.

== 9/2/2019 ==

=== Labor Day ===
== '''8/29/2019''' ==

=== SubTeam Meeting notes: ===
Notes on subteam wiki: [[Automatically Defined Functions]]

Gabriel linked a paper that is very useful: https://www.researchgate.net/publication/229046942_Co-evolutionary_automatically_defined_functions_in_genetic_programming
* Answers the question of evaluating Individuals through swapping candidate ADFs.
* Answers the question of selecting evaluated individuals through elitism approach.
** We could possibly swap the ADFs into a paerto-front of individuals and average the performance change as a performance metric. We will refer to this as pareto-elitism.
* Does not answer how we should evolve ADFs, how to get a candidate list of ADFs, or when we would update the ADF populations.
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Date Completed
|-
|Figure out where to add custom ADF implementation to EMADE
|Complete
|8/29/2019
|9/8/2019
|-
|}

== '''8/27/2019''' ==

=== Personal Notes ===
* Set up EMADE again to test if certain functions are used. Reinstalled mySQL for Ubuntu, which was a pain.
* useful SQL documentation: https://dev.mysql.com/doc/refman/8.0/en/creating-accounts.html
* For some reason the default problem set XML documents do not seem to have proper syntax. 
* Possibly the parser was updated without updating the XML files. I will ask about this in the next meeting.
** UPDATE: The master branch was messed up but it should be fixed now. {| class="wikitable" !Task !Current Status !Date Assigned !Suspense Date !Date Resolved |- |Put Sub-Team meeting notes on Wiki |Complete |8/26/2019 |8/30/2019 |8/29/2019 |}

==  '''8/26/2019''' ==

=== Team Meeting Notes ===
* Did scrums at the beginning for each group
* Jason said to add meeting notes to subteam wikis and to add TODOs for each week
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Put Sub-Team meeting notes on Wiki
|Complete
|8/26/2019
|8/30/2019
|8/29/2019
|-
|}

== '''8/23/2019''' ==

=== Sub-Team Meeting Notes ===
* Discussed how ADFs work. They are changing extensions to a primitive set that should improve in usefulness over time.
* We realized that we do not have any idea how EMADE uses ADFs even when looking at the source code.
* We planned to remove ADF code to make way for a non-deep implementation of ADFs
* Talking with Justin he strongly recommended keeping the "list of lists" description of individuals for reference to ADFs.
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Read a paper on ADFs 
|Complete
|8/23/2019
|8/30/2019
|8/29/2019
|-
|}

== '''8/19/2019''' ==
* Joined ADF team. 
* Decided to look into ADF papers
* Learned that Edit distance is the number of changes to make one graph identical to another
* Decided to meet again on 8/23/2019. We will meet every Thursday at 6pm {| !Task !Current Status !Date Assigned !Suspense Date !Date Resolved |- |Read a paper on ADFs  |Complete |8/23/2019 |8/30/2019 |8/29/2019 |}