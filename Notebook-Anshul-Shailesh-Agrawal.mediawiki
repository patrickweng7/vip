= Introduction =
Hello! This is my VIP Notebook for Automated Algorithm Design at Georgia Tech. I'm a third-year Computer Science major, minoring in linguistics.

Email me at: [mailto:anshul.jkt@gmail.com anshul.jkt@gmail.com]

Current sub-team: [[Fall 2020 Sub-team Weekly Reports#Market Analysis and Portfolio Optimization .28a.k.a Stocks.29|Stocks]]

Past sub-team: [[Fall 2020 Sub-team Weekly Reports#Market Analysis and Portfolio Optimization .28a.k.a Stocks.29|NLP]]

= December 2, 2020 =
* Couldn't finish the unit test in time because we haven't yet decided if we are going to include the OBV primitive.
** The primitive is ready for next-semester students to use, but they will have to create the unit test then.
* Final presentations, it is 6am local time in Thailand.
** [[files/Sajkdnf.png|601x601px]]
** [[files/Obvslide.png|592x592px]]
** [[files/Extraobvslide.png|751x751px]]
** [[files/Stocksres.png|760x760px]]
** [[files/Stocksres2.png|779x779px]]
** Our sub-team was able to get some pretty impressive results in its first semester, as we were able to:
*** Research technical indicators for the stock market to be used as potential primitives
*** Conduct literature review of different approaches to using machine learning and GP to predict the values of stocks
*** Have our MySQL data ransomwared on AWS
*** Adapt EMADE to work on a stocks dataset
*** Create additional primitives for technical indicators
*** Complete multiple EMADE runs, with compelling results once we fixed the profit objective issue.
* And with this, my last VIP semester is complete. Bye!

=== To do ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Complete OBV Primitive
|Completed
|11/19/20
|11/23/20
|11/28/20
|-
|Write unit test for OBV
|Stalled
|11/19/20
|Next Semester
|
|-
|Presentation Slides
|Completed
|11/28/20
|12/01/20
|12/02/20
|-
|Final Presentation
|Completed
|11/28/20
|12/02/20
|12/02(3)/20
|}

= November 23, 2020 =
* Last full meeting before Thanksgiving and presentations
* Final sub-team meeting time has been set to Saturday 12pm on the 28th of November
* Completed OBV primitive, need Joseph to work on the unit test
* [[files/Image123123423.png|1075x1075px]]
** Asked Rishi to look over the primitive to make sure it's okay to run
Started work on final presentation which is on Dec 2nd at 6pm
* [[files/Sajkdnf.png|601x601px]]
* Meeting again on Monday to go over presentation, but it is okay if I don't make it
* I just need to work on my slides and get them ready in time.

=== To do ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Complete OBV Primitive
|Completed
|11/19/20
|11/23/20
|11/28/20
|-
|Write unit test for OBV
|Waiting on Rishi and Joseph
|11/19/20
|11/30/20
|
|-
|Presentation Slides
|Started
|11/28/20
|12/01/20
|
|}

= November 16, 2020 =
* Meeting with Jason, he looked at our initial results and pointed out some trees to look into
* Talked to the team about our volume issue, and was shown the stockDataScript.py file for help with getting the volume data from AlphaVantage
* [[files/Stock data script.png|602x602px]]
* Talked to Rishi: We can just assume volume will be passed in as an argument to the primitive.
* Rishi is also going to skim over the primitive when we're done testing
** We can test by running in sample data and checking results
* Tuesday: Joined Abhiram's EMADE run as worker
** Our AWS Server got Ransonware attacked.
** All the data was removed and replaced with this text:
*** '1', 'To recover your lost databases and avoid leaking it: visit [link] and enter your unique token 25005943d4584579 and pay the required amount of Bitcoin to get it back. Databases that we have: at_test, colab_3, colab_2, colab, stocks_regress, big_colab_run. Your databases are downloaded and backed up on our servers. If we dont receive your payment in the next 9 Days, we will sell your database to the highest bidder or use them otherwise. To access this site you have use the tor browser [more links] '25005943d4584579'
** Created a new AWS server and started a run to get new data.
*** Joined as worker:         
** [[files/EMADE worker run.png|700x700px]]
** https://colab.research.google.com/drive/1qrS1Qj65XPz_kse5mXjSL1YW8cxVXzwL#scrollTo=ec_noWbzXqzx
* Thursday meeting:
** Run results
*** The model is choosing not too spend all of its money in a few trades, which makes sense
*** we need an additional year of buffer for every individual we evaluate, and so if you wanted to evaluate something over a 100 days you'd need an additional 365 of history.
** Authors of paper have not replied
* Need to finish OBV TI and then write the unit test for it
** https://colab.research.google.com/drive/1-SUaxGU773IrNiTNxqRwc_DkoHfaVqLL#scrollTo=SJljtfLI5rWW
** [[files/OBVV.png|674x674px]]

=== To do ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|New EMADE run with profit as the objective
|Done
|10/19/20
|10/30/20
|
|-
|Complete OBV Primitive
|Almost done
|11/02/20
|11/23/20
|
|-
|Write unit test for OBV
|Pending
|11/19/20
|11/28/20
|
|}

= November 09, 2020 =
* Worked with Joseph on implementing OBV TI for EMADE.
# Tried to implement the OBV indicator
# but need prices as well as volume
# trying to see get_data.ipynb for help with API input
## The file was corrupted so I had to restore an old commit of it
# started OBV indicator on colab
# gonna meet with Joseph again to see if we can implement the volume input
* Primitive Colab:
** https://colab.research.google.com/drive/1-SUaxGU773IrNiTNxqRwc_DkoHfaVqLL#scrollTo=SJljtfLI5rWW
** Need to get volume data, possibly try to incorporate into stream to feature. This way we could add volume as a data stream in EMADE and allow us to use more TIs
** Going to work with the team to see how to get the primitive working.

=== To do ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|New EMADE run with profit as the objective
|Pending
|10/19/20
|10/30/20
|
|-
|Help out with TI EMADE implementations (Complete OBV)
|Almost done
|11/02/20
|11/23/20
|
|}

= November 02, 2020 =
* New tasks created.
* Working with Joseph, Tanishq and David on Technical Indicator (TI) implementations in EMADE
** Will meet later in the week to work on this.
* Thursday meeting: 
** Need to look through the technical indicators we’ve selected in our research and decide which ones of them are most useful to use with EMADE.
* Technical Indicators considered:
** RSI
** SMA
** OBV
** Parabolic Stop and Reverse
=== To do ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|New EMADE run with profit as the objective
|Pending
|10/19/20
|10/30/20
|
|-
|Help out with TI EMADE implementations
|Pending
|11/02/20
|11/09/20
|
|}

= October 26, 2020 =
* First meeting with the new bootcamped students
* Introductions
* Explaining to the bootcamp students what we do, showing them the papers, etc.
* We continued to explore the anomalies in our data. We are confused about the trade suggestions and the relevance of the trade signal. We'll continue to look into possible explanations, and whether we should adjust the strategy of our model
* ''Subteam Meeting (Thursday):''
** Tanishq [https://github.gatech.edu/rbhatnager3/emade/commit/61032bac75d2d21e548a8c2eee1d57402e7bff56 added the TI methods as EMADE primitives]
** We're continuing to look into our recent results (hoping to come up with solution/possible actions by end of next Monday's meeting)
** Some of us are beginning to explore new technical indicators we may use

=== To do ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Introduce first-semester students
|Completed
|10/19/20
|10/26/20
|10/26/20
|-
|New EMADE run with profit as the objective
|Pending
|10/19/20
|10/30/20
|
|}

= October 19, 2020 =
* Midterm presentations: https://docs.google.com/presentation/d/1Fm_pXaKLDFHDEsk-T1rXW1p2UGS8ax2Nvd8k8TIstqs/edit#slide=id.ga06681f0ea_0_163
*Pre-presentation notes
** Before the Midterm presentation, we found the truth data itself produced a negative profit percentage
** Data visualization of the SPY dataset found that our moving average values from the AlphaVantage API were inconsistent with the price values
*** First used GOOGL stock data since it was much richer with many peaks and troughs
*** Found that we are not using adjusted price data, so switching to take make the moving average look more accurate
** Found that our profit percentage calculation was reversed, resulting in the function buying at high and selling at low
*** Reversing improved the profit percentage from -11% on test data to 130%
** Finished writing new functions to evaluate Technical Indicators
*** Need to add them as primitives in EMADE
** Delegating work for the first semester students to do
*** first semesters will help us write new primitives to calculate technical indicators and modify hyperparameters on technical indicators
**** ex. Moving Average primitive will take a parameter of period of time or decay weighting for exponential moving average
* We need to counter the negative profit percentages by running EMADE again with the proper calculation and the profit as the maximation objective.
* We'll have the new students join next meeting!

=== To do ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Midterm presentation
|Completed
|10/05/20
|10/18/20
|10/19/20
|-
|New EMADE run with profit as the objective
|Pending
|10/19/20
|10/30/20
|
|-
|Introduce first-semester students
|Pending
|10/19/20
|10/26/20
|
|}

= October 12, 2020 =
* Working on presentation
* Worked the slide for new members and discussed what to do with them when they arrive in a week or two.
** We're going to make them write primitives for EMADE, since it is a short, sandboxed task
* Tasks for rest of semester:
** Analysis of big_colab_run and at_test database
** Finish Midterm Presentation with results
** Writing STREAM_TO_FEATURES primitives
** New Run with evolution primitive changes (already made changes just need to run)
** Writing fitness function to calculate profit instead of MSE
** Implementing Keras in Stocks branch
** Research implementing CEFLANN in EMADE
* Thursday meeting
** Working on presentation, most of the slides have been created and assigned by now.
** Started another colab run, trying to join as worker with new XML file
** Separated out presentation work so that everything is assigned.

=== To do ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Midterm presentation
|In progress
|10/05/20
|10/18/20
|
|}

= October 05, 2020 =
* Time series data from initial run:
** [[files/Timeseries data prediction initial run.png|407x407px]]
* Meeting on Thursday for EMADE run
** Some initial issues with the evolution waiting for a master when we tried running at 1pm
** Ran at 5:30 no problem with everyone on call
** Made a worker setup coalb notebook: https://colab.research.google.com/drive/13qhfrRSm9bnDNrjheWdDnP-Gqnlv7RX1
** Started the midterm presentation: https://docs.google.com/presentation/d/1Fm_pXaKLDFHDEsk-T1rXW1p2UGS8ax2Nvd8k8TIstqs/edit#slide=id.ga06681f0ea_0_163 
** Summary: Ran 52 generations of EMADE with S&P 500 dataset and found a minimum standard error of 10.8387 for a few models (27.2492 was best of seed individuals)
*** Have not been able to replicate this improvement in subsequent runs of EMADE
** After presentation tasks:
*** Mid-term Presentation (Anshul already got this started, so let him know if you'd like to help)
*** Figuring out how to run the EMADE individuals independently (so we can test their profit percentage)
*** Adding Jason's suggestions to our fork, especially new primitives (let me or Kinnera know if you're interested in this.
** Improved learner modification primitives to ensure non-negative values and float values in 0-1 range. Also temporarily removed the selection of Ensemble primitives as 'SINGLE' was the only one that worked for regression.
** Went over the structure of the midterm presentation and dedicated a few people to begin preparing it.

=== To do ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Get stock data script ready
|Completed
|09/28/20
|10/05/20
|10/02/20
|-
|Midterm presentation
|Started
|10/05/20
|10/18/20
|
|}
= September 28, 2020 =
Discussing CEFLANN research that Rishi and Max have been working on.
* First, what is FLANN:
** https://www.hindawi.com/journals/afs/2011/831261/
** “In comparison to other soft computing techniques, functional link artificial neural network (FLANN) and Legendre Neural Network (LeNN) has less computational cost and is easily implemented in hardware applications. This is the motivation on which the present research work is based.”
** “Patra originally proposed functional link artificial neural network (FLANN), and it is a novel single-layer ANN structure capable of forming arbitrarily complex decision regions by generating nonlinear decision boundaries [15–18]. In FLANN, the hidden layers are removed. Further, the FLANN structure offers less computational complexity and higher convergence speed than those of an MLP because of its single-layer structure.
*** Example of FLANN structure.
*** They also go into detail on the development of the model (Note: it is specific to their example which predicts noise in machinery). Another example comparing regular MLP NN’s with FLANN (includes an example of the development specific to their topic, location prediction)
*** https://ieeexplore.ieee.org/document/6508166
**** Highlights:
***** The MLP too 100 times longer to simulate what the FLANN could simulate. An example of the development of a CEFLANN model with the use of TI’s:
*** https://www.sciencedirect.com/science/article/pii/S2405918815300179
**** Probably the most relevant source

* It should be possible to follow their methodology in order to implement a proper CEFLANN setup in EMADE.
** We might need an ELM (Extreme Learning Machine) Model in order to implement this, which helps train the network.
** Should be able to find an API that offers an ELM without much additional setup.
* Set up EMADE in Colab with Anish's help on this notebook: https://colab.research.google.com/drive/10c3Q-QvTuha-nBDLyXuvv54aTn2fWDYB?usp=sharing
* EMADE run happened on Friday, October 2nd.
** Update from Rishi: I think I finished the script to get the stock data. I had to guess on a couple things because they weren't clear in the paper, but I commented when I did that. For some reason it's still saying I called the API too many times even with a new key so maybe it's tracking my IP so if someone else could run the script and lmk if anything doesn't work that'd be great. It's pushed to stocks-base at testCode-stocks/stockDataScript.py
** Issue with too many API calls
* Need someone to work on NLP team's neural nets to see if we can implement something similar in our own stocks subteam.

=== To do ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Read paper chosen by the group
|Completed
|09/21/20
|09/28/20
|09/28/20
|-
|Setup a local run of EMADE to test
|Completed
|09/21/20
|09/28/20
|09/28/20
|-
|Get stock data script ready
|Completed
|09/28/20
|10/05/20
|10/02/20
|}
= September 21, 2020 =
* Paper we have decided to use in our research moving forward: https://www.sciencedirect.com/science/article/pii/S2405918815300179?via%3Dihub
** A hybrid stock trading framework integrating technical analysis with machine learning techniques
** Abstract: “produces a set of continuous trading signals within the range 0–1 by analyzing the nonlinear relationship exists between few popular technical indicators. Further the output trading signals are used to track the trend and to produce the trading decision based on that trend using some trading rules”
** Similar to the approach we had in mind
** Conclusion: “model provides superior profit percentage compared to some other known classifiers … instead of taking trading decision based on particular technical indicators, it is more profitable to take trading decision using combination of technical indicators with computational intelligence tools”
* We need to also set up emade to run on colab and AWS, so that everyone may work on the project collaboratively.

=== To do ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Pick 3-4 papers by Thursday and read 1-2 of them
|Completed
|09/03/20
|09/10/20
|09/10/20
|-
|Choose 1 paper as a group to pursue
|Completed
|09/14/20
|09/21/20
|09/21/20
|-
|Read paper chosen by the group
|Started
|09/21/20
|09/28/20
|
|-
|Setup a local run of EMADE to test
|Started
|09/21/20
|09/28/20
|
|}
= September 14, 2020 =
* First meeting back after Labor Day long weekend
* Research papers I picked:
*# https://ieeexplore.ieee.org/abstract/document/781932
*## Using genetic programming to predict financial data. H. Iba; T. Sasaki
*## Japanese Stock Market
*## Using only past data or different values led to unstable predictions
*## Ended up working more on longer term predictions
*# https://www.sciencedirect.com/science/article/abs/pii/S0305054803000637
*## Generating trading rules on the stock markets with genetic programming
*## Short-term trading on stocks, trying to predict individual stocks as opposed to large indices like the S&P 500 or the DJI
*## Good list of primitives and well-written article explaining different components of the whole pipeline
*## Really promising results
*# https://link.springer.com/article/10.1023/A:1008768404046
*## Genetic Programming Prediction of Stock Prices, M. A. Kaboudan
* Need to talk to EMADE team about which paper seems most promising
* VIP Notebook Self Assessment:
** [[files/Self-assessment.png|1134x1134px]]

=== To do ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Pick 3-4 papers by Thursday and read 1-2 of them
|Completed
|09/03/20
|09/10/20
|09/10/20
|-
|Choose 1 paper as a group to pursue
|Started
|09/14/20
|09/21/20
|
|}
= August 31, 2020 =
* Research subteam meeting set to 5:30pm on Thursdays
* Team C (Technical Indicators) research team on hold until other teams make some progress
* On Team A, we're looking at leading indicators of different kinds to help predict stock prices with varying timescales

=== Team Discussions ===
* Technical Indicators
** Volume:
*** Leading
*** On Balance Volume: <nowiki>https://www.investopedia.com/terms/o/onbalancevolume.asp</nowiki>
*** Not just a volume but also targets momentum; Recursive
*** Could be implemented hour by hour and day to day.
** Trend Indicators
*** Leading: not many
*** Parabolic stop and reverse (SAR): Doesn’t work well for sideways moving prices and unstable work.
*** Moving Average (MA): takes prices and averages over an interval. Where the price is trending based on that. Can be used for any timescale (hour by hour, day to day).
** Relative Strength Indicator:
*** 14 days to predict trends. Stock is being overbought or oversold.
*** Timescale can be customized.
* With Jason:
** STREAM_TO_FEATURE: Step detection might be a feature. (Eg) TI predicts a value could be a feature. Binary 01 could be a feature. Could be grouped differently.
** Learning Portion: Ensembling: Adaboosting, Bagging. Learner by itself. Cascaded learners (stacking).
** Forcing architectures?: avoid this since you want EMADE to explore.
** STREAM_TO_STREAM: Time series data itself is manipulated. Mean filtering, median filtering, edge and step detection.
** Branch: CashV2 → Emade.py → evaluate_individual → looks in the tree structure for some items some valid primitives. This is called ____? May need a separate one for stocks. Come up with a convention for the Technical Indicators primitives.
** Seed things: algorithms that you expect to work feed into emade in the beginning so it’ll evolve from them.
** Literature Research. → something each member can do over the week??
** Question to be answered: how can automated algorithm design improve existing algorithms? Implement their algorithm in EMADE, feed data, add more indicators and see how it compares to the original.
** Could maybe look into having a neural net that is evolved/tuned through GP
** Big goal: Find the best algorithm, but also find the algorithm that finds the best algorithm (how can the same program find a solution to a different problem?)
* Our model:
** First model: confidence interval and price change percentage.
** Second function: use the confidence interval, price change percentage to include in the fitness function to decide buy/sell/hold.
'''Before next Thursday:'''
* Research group: finish research into technical indicators, but then consider focusing more on looking at articles and research papers for building trading AIs, replicating those in EMADE, and then improving upon those methodologies with our own research

'''Technical Indicator Research Notes'''

Breadth Indicators
* Focus on market breadth - how other stocks within a market are performing relative to their markets. Useful for adding information about competing stocks and the market health.
* Most of these indicators depend on the Advance/Decline Line incorporate this feature in calculation
* Cumulative Volume Index
** similar to On Balance Volume (OBV) except the CVI uses the actual up- and down-volume instead of assuming all volume is either up or down when the stock closes higher or lower.
** Probably better to use over On Balance Volume
* McClellan Oscillator and Summation Index
** based on the difference between the number of advancing and declining periods.
* Advance/Decline Line
** shows the degree of participation of individual stocks in a markets rise or fall. It does so by subtracting the number of declining stocks from the number of advancing stocks.

=== Key takeaways ===
* We could now look into some more literature research to see other people's approaches to the same question in the past
* A couple leading technical indicators that are easily calculatable and generalizable are worth starting off with, after which we can add more complexity with more complex timescales
* Some interesting research: https://www.researchgate.net/profile/Kumkum_Garg2/publication/238747905_A_Hybrid_Machine_Learning_System_for_Stock_Market_Forecasting/links/00b7d53b4cfc215d81000000/A-Hybrid-Machine-Learning-System-for-Stock-Market-Forecasting.pdf
* https://ieeexplore.ieee.org/abstract/document/8258518?casa_token=qIhHWwtne7IAAAAA:K-eeA6t2B2Gsn8N6GOQ3YuIajmj0kx1a8lzd0oSNyTRlhqXU7NonJzGvMru6lQI5MOmG-2qk
* We're going to look for papers that seem interesting to us, link them in a collaborative doc and take notes on them.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Decide if I want to switch subteams
|Completed
|08/17/20
|08/24/20
|08/20/20
|-
|Look through numerical indicators for stocks to figure out good picks
|Completed
|08/24/20
|08/31/20
|09/03/20
|-
|pick 3-4 papers by Thursday and read 1-2 of them
|Started
|09/03/20
|09/10/20
|
|}
= August 24, 2020 =
* Decided to switch to Stocks subteam
* We could use tradingview.com as a data source
* Abhiram brought up a good point: https://www.tradingview.com/symbols/SPX/technicals/ in this view it is bascially running a bunch of computations and algs on the S&P 500 index….. are we simply going to take those values and replace the cummulative summary meter on the top with whatever EMADE generates?
* We have 3 main objectives:
** Pick which numerical indices to pick as features for the model
** Figure out how to apply EMADE and other ML/GP techniques to predict trends
** Figure out data streaming for EMADE to pull in data automatically
* I like the feature selection idea because I feel like it will be a very interesting and applicable analysis of various complicated mathematical indices
* Marcos Lopez De Prado's works might help guide our research: http://www.quantresearch.org/index.html
* https://www.businessinsider.com/stock-traders-swear-by-these-12-technical-indicators-2017-5
* Old stocks team was focusing on basic stocks as well as some minimal portfolio management
* We need to decide which indicators to use, and what to predict. A starting point might be to look at some ETFs
* Tasks/updates from previous week:
** Meeting time confirmation.
*** After VIP until 6:30 PM
** Assign Team Leader
*** Abhiram, Rishi
* Finally, splitting into 3 groups:
** Technical Indicators
** Ensemble/EMADE
*** stream_to_feature.
** Research ML used in trading.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Decide if I want to switch subteams
|Completed
|08/17/20
|08/24/20
|08/20/20
|-
|Look through numerical indicators for stocks to figure out good picks
|Started
|08/24/20
|08/31/20
|
|}

= August 17, 2020 =
* First meeting of Fall 2020 Semester
* Full semester will be hybrid, so in-person meetings are optional.
* Catching up on what the teams have been up to over the summer, as well as the last semester.
* There are discussions about a new stocks sub-team which sounds very interesting.
* Talked to Kinnera and other members interested in the Stocks sub-team, we're working on finding out whether or not this is feasible.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Decide if I want to switch subteams
|Started
|08/17/20
|08/24/20
|<nowiki>--</nowiki>
|}

= April 21, 2020 =
* Presentations complete
** Our presentation went well, but it was unfortunate that we weren't able to complete our starting goal of stringent statistical analysis of our primitives.
** Our future goals are as follows:
*** Work on optimizing the TFISF primitive so it takes less time to evaluate
**** Currently it takes more than optimal time
*** Work on optimizing TextRank so that it is able to effectively run as a primitive without needing huge glove word embedding files.
*** Add more detail to documentation to list all the changes needed when adding a new primitive
*** Use an external MySQL implementation to reduce database issues
*** Spend more time to do statistical analysis on our primitives and run tests on how our individuals performed. 
*** Understand how the different created primitives help improve the accuracy of our individuals, and determine which ones, if any, are ineffective or detrimental.
*** Try and get access to PACE itself because it provides better computing power than PACE-ICE.
**** I have already started this process with OIT and many emails have been exchanged thus far.
**** As of April 25, we have gotten access to PACE for use with EMADE.
**** We will be able to use this next semester for better performance overall.
**** [[files/Pace confirmed.png|652x652px]]
* Peer-evaluation complete
* Our statistical analysis of the TSISF and num_named_entities primitive:
** [[files/Stats.png|512x512px]]
* Accuracy score function for multidimensional data:
** [[files/Multidim.png|508x508px]]

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Test TextRank
|Almost complete
|04/20/20
|Fall 2020
|<nowiki>--</nowiki>
|-
|Find a new MySQL solution
|Started
|04/20/20
| Fall 2020
| --
|}

= April 20, 2020 =
* Worked on final presentation with the team remotely: https://docs.google.com/presentation/d/1z6_uYlpC92xIy1ODrbQTgLnqIZoJwgYI5h0_WMFlwSk/edit#slide=id.g83b99548f5_7_0
* Facing more issues with connection to the VPN and PACE-ICE on my end, and have been unable to reliably connect to the internet in the past few days.
* Changes made to EMADE code in order to accommodate TextRank as a primitive:
 EMADE.py - change the line with (_inst.datasetDict[dataset]['type'] == 'summarydata') to whatever you want the individual to look like: in your cases it will need to be something like ( (_inst.datasetDict[dataset]['type'] == 'summarydata')
 	and (not np.all(np.array([i in my_str(individual) for i in ["LearnerMod", "TextRank"]])) )) but with your primitive instead of TextRank
 
 Edited gp_framework_helper.py to add TextRank so it can actually be used: added pset.addPrimitive(tp.textRank,  [EmadeDataPair], EmadeDataPair, name='TextRank'
* Added an accuracy score method for results evaluation as suggested by Alex, and made the change in the template file as well.
 def accuracy_score_multi(individual, test_data, truth_data, name=None):
     """return accuracy score for multi-dimensional data, similar to false_positive_multi
     Args:
         individual: individual to score
         test_data: test data
         truth_data: labeled data
         name: optional name parameter
     Returns:
         objective score
     """
     test_data = np.array(test_data)
     truth_data = np.array(truth_data)
     
     if truth_data.shape != test_data.shape:
         return np.inf
     fp = np.sum(test_data[truth_data==0] != 0)
     fn = np.sum(test_data[truth_data==1] != 1)
     size = np.product(truth_data.shape)
     true = size - (fp+fn)
     return 1 - true/size
* Once again, I started having issues where my EMADE instance wasn't connecting to my mysql instance.

* Error I frequently encountered on running emade:
 ...
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/sqlalchemy/pool/impl.py", line 136, in _do_get
     return self._create_connection()
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/sqlalchemy/pool/base.py", line 308, in _create_connection
     return _ConnectionRecord(self)
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/sqlalchemy/pool/base.py", line 437, in __init__
     self.__connect(first_connect_check=True)
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/sqlalchemy/pool/base.py", line 639, in __connect
     connection = pool._invoke_creator(self)
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/sqlalchemy/engine/strategies.py", line 114, in connect
     return dialect.connect(*cargs, **cparams)
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/sqlalchemy/engine/default.py", line 453, in connect
     return self.dbapi.connect(*cargs, **cparams)
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/pymysql/__init__.py", line 94, in Connect
     return Connection(*args, **kwargs)
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/pymysql/connections.py", line 325, in __init__
     self.connect()
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/pymysql/connections.py", line 630, in connect
     raise exc
 sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (2003, "Can't connect to MySQL server on 'rich133-c32-10-r' ([Errno 111] Connection refused)")
 (Background on this error at: <nowiki>http://sqlalche.me/e/e3q8</nowiki>)
* Once I tried re-removing the root user, re-adding, and updating privileges:
   ...
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/sqlalchemy/pool/base.py", line 639, in __connect
     connection = pool._invoke_creator(self)
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/sqlalchemy/engine/strategies.py", line 114, in connect
     return dialect.connect(*cargs, **cparams)
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/sqlalchemy/engine/default.py", line 453, in connect
     return self.dbapi.connect(*cargs, **cparams)
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/pymysql/__init__.py", line 94, in Connect
     return Connection(*args, **kwargs)
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/pymysql/connections.py", line 325, in __init__
     self.connect()
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/pymysql/connections.py", line 599, in connect
     self._request_authentication()
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/pymysql/connections.py", line 861, in _request_authentication
     auth_packet = self._read_packet()
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/pymysql/connections.py", line 684, in _read_packet
     packet.check_error()
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/pymysql/protocol.py", line 220, in check_error
     err.raise_mysql_exception(self._data)
   File "/nv/pace-ice/aagrawal324/.conda/envs/emade/lib/python3.7/site-packages/pymysql/err.py", line 109, in raise_mysql_exception
     raise errorclass(errno, errval)
 sqlalchemy.exc.InternalError: (pymysql.err.InternalError) (1049, "Unknown database 'summary'")
 (Background on this error at: http://sqlalche.me/e/2j85)
* I have been unable to reestablish a mysql connection so far.
* A previous successful run of EMADE had the following out file (truncated to fit):
 ...
 Received: Cv2Pow(WindowFlatTop(GRUNeuralNetwork(ARG0, 100, 50, 50, 9, 1), passTriState(1)), passTriState(0), 4)
 	With Hash 3c4767edbab7472c4dc2e0269a075498e344b5d7bbf3d6629148218acbc8379e
 	Computed in: 0.00027561187744140625 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: MultiplySpectrum(Cv2Transpose(WindowNuttal(EmadeDataMultiplyPair(k_means_clustering(ARG0, 3), passTriState(0)), passTriState(passTriState(0))), passTriState(passTriState(passTriState(1)))), ArcTangent(MeanWithHole(MinimumToZero(adf_1(ARG0), passTriState(0)), passTriState(passTriState(2)), lessThanOrEqual(passFloat(1.0), ifThenElseFloat(falseBool, 0.1, 100.0)), lessThan(myFloatSub(3.7559872187537326, 10.0), ifThenElseFloat(falseBool, 10.0, 1.0))), passTriState(passTriState(passTriState(2)))), passTriState(passTriState(passTriState(passTriState(0)))))
 adf_1: mySelFwe(mySelKBest(ARG0, 2, 64, 7), passTriState(passTriState(1)), passTriState(2), myFloatDiv(0.1, 100.0))
 	With Hash a2c648042758770d575af01a5a620ed9c3bda8d8cb719c65874310e56f4c0264
 	Computed in: 0.0005414485931396484 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: MySum(HighpassFourierGaussian(NumNamedEntities(mySelKBest(GaussianPeakEM(MorphErosionRect(ARG0, 0, 50, 5, 64), 2), passTriState(1), passBool(myNot(greaterThanEqual(passFloat(1.0), myFloatSub(0.1, 1.0)))), greaterThan(1.0, 1.0))), passTriState(passTriState(passTriState(0))), lessThanOrEqual(myFloatDiv(0.1, myFloatSub(0.01, 1.0)), myFloatSub(myIntToFloat(5), ifThenElseFloat(trueBool, 0.01, 0.01)))), passTriState(passTriState(passTriState(passTriState(passTriState(1))))))
 	With Hash 3d796a34762ccf6d6f3cf4ccba5ee73e3a01cf071495505c8e2de9ab3ee31365
 	Computed in: 0.0003123283386230469 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: mySelFdr(MyInformedSearch(MultiplyTransposed(WindowHann(ARG0, 0, trueBool), passTriState(2), lessThanOrEqual(10.0, 0.1)), ArcCosine(ARG0, 1), 1, passBool(lessThanOrEqual(1.0, 100.0)), myFloatDiv(ifThenElseFloat(trueBool, 0.1, 100.0), myFloatSub(10.0, 100.0))), passTriState(1), notEqual(0.1, myFloatSub(myIntToFloat(2), 0.01)), myFloatMult(passFloat(myFloatAdd(1.6982406503914707, 1.0)), passFloat(ifThenElseFloat(trueBool, 100.0, 100.0))))
 	With Hash 504ec4a73d9f3a9796bc6d86b5fdb3d60607d50465fad7d74458b9afde9e68db
 	Computed in: 0.0003018379211425781 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: LSTMNeuralNetwork(ScalarAdd(ARG0, 1, myIntToFloat(falseBool)), 0, myIntAdd(greaterThan(myFloatDiv(myFloatSub(myFloatDiv(2.3630960220452293, 0.01), myFloatDiv(10.0, 10.0)), passFloat(passFloat(0.01))), myFloatDiv(passFloat(-3.5260244846622593), myFloatSub(myIntToFloat(2), passFloat(10.0)))), 6), passTriState(1), passBool(falseBool), myIntDiv(4, 100))
 	With Hash a7a5d40b946564d39c187fdfbc869908c5ee7bce1145f790a2cb01e06e950524
 	Computed in: 0.0002627372741699219 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: mySelKBest(EmadeDataDividePair(SavitzkyGolayFilter(Cv2LessThan(ARG0, ARG0, 2), passTriState(passTriState(passTriState(passTriState(0)))), lessThan(10.0, 1.0), myIntDiv(4, 128), myIntDiv(3, 2)), passTriState(passTriState(0))), passTriState(passTriState(passTriState(1))), myIntAdd(myIntDiv(notEqual(10.0, 100.0), passInt(255)), myFloatToInt(passFloat(100.0))), myNot(notEqual(myFloatAdd(1.0, 100.0), myFloatDiv(1.0, 0.01))))
 	With Hash 93030793fa4383b97effa5f8e057a560727a0e4e2054a73230e856ae7233dd6d
 	Computed in: 0.0002994537353515625 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: EdgeDetectionCanny(TfidfVectorizerMod(HighpassFourierEllipsoid(ARG0, 2, lessThan(ifThenElseFloat(ifThenElseBool(myAnd(falseBool, trueBool), myNot(falseBool), greaterThan(100.0, 10.0)), myIntToFloat(myNot(trueBool)), myIntToFloat(lessThan(-1.6752839159224697, 1.0))), myFloatAdd(myFloatSub(myFloatDiv(1.0, 100.0), myIntToFloat(128)), myFloatDiv(myIntToFloat(32), passFloat(100.0))))), greaterThan(10.0, 0.1), passTriState(0), ifThenElseBool(falseBool, falseBool, falseBool), myNot(trueBool)), passTriState(passTriState(2)), passTriState(passTriState(2)), greaterThan(myFloatSub(0.01, 1.0), myFloatDiv(1.4306983475117931, 0.01)), myOr(myAnd(falseBool, trueBool), greaterThanEqual(-2.455096608329521, 10.0)))
 	With Hash 8a2a8e55dff683be64417d9532a70edf271443f579f060350cef7c7d2d00eb8e
 	Computed in: 0.00036263465881347656 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: MorphOpenEllipse(ToFloatNorm(ContourMaskRangeExtent(ARG0, 0, 8, 64), 2), passTriState(passTriState(0)), greaterThan(myFloatMult(100.0, 0.01), myFloatAdd(1.0, -3.259134594846129)), myIntMult(greaterThanEqual(0.01, -2.440235068395763), myIntSub(7, 32)))
 	With Hash 61b72ba44d25047301af2aabe57f3fdc69f9c13df0625c4d71758fb71ae07d61
 	Computed in: 0.00023293495178222656 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: ContourMaskMaxEquDiameter(EmadeDataAddFloat(WindowLanczos(MorphBlackhatEllipse(Cv2Min(ARG0, ARG0, 2), passTriState(1), myIntMult(255, 92), greaterThan(10.0, 0.01)), passTriState(passTriState(2))), passTriState(passTriState(0)), passFloat(myFloatDiv(myFloatDiv(100.0, 100.0), ifThenElseFloat(trueBool, 0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(passTriState(1))))), passInt(lessThan(0.1, myFloatSub(myFloatDiv(-2.450642828580323, -4.532936429626494), myFloatSub(-4.772881063408329, 1.7555324839052577)))))
 	With Hash d8d26b30ec2ef45b1ff19b2612035a239840a535fe1329b8b6bb2141f9ae2fca
 	Computed in: 0.00030517578125 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: LSTMNeuralNetwork(ARG0, 68, 9, 150, 100, trueBool)
 	With Hash 6c3a7224be61efff22a5a4fd0555b36ba810a59e0e0c5d2f38005b6aa7976d06
 	Computed in: 0.00018453598022460938 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: MorphDilateRect(HighpassLaplacian(ARG0, 1, 2, 2, myIntAdd(50, myIntMult(128, 32))), 2, 50, 7, 32)
 	With Hash 6156e7fce720a7f0df6a4948d86f150ab9a290e93b7af0a87a74bdad1be3734c
 	Computed in: 0.00019860267639160156 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: HighpassFourierUniform(HighpassSobelDerivative(ARG0, 1, 10, 8, 64, myIntDiv(64, 4), trueBool), 1, greaterThanEqual(0.01, 1.0))
 	With Hash 2b15b2a52cb1ddea451deb0c423affcab1c566fdffeaf4f293ff06d3fd4778f3
 	Computed in: 0.00024366378784179688 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: ThresholdBinaryFloat(MorphOpenRect(BitwiseOr(MeanShiftClustering(ARG0), MyDiff(MyAutoCorr(ARG0, 1), passTriState(passTriState(passTriState(0)))), passTriState(passTriState(2))), 1, equal(myFloatMult(myFloatDiv(1.0, 0.1), myIntToFloat(64)), ifThenElseFloat(passBool(falseBool), myFloatMult(10.0, 0.01), myFloatAdd(0.1, 1.0))), myOr(myNot(passBool(falseBool)), falseBool)), passTriState(passTriState(passTriState(passTriState(2)))), lessThan(myFloatMult(myFloatDiv(myFloatMult(0.01, 2.7889546200809825), myFloatDiv(0.01, 0.1)), myFloatDiv(1.0, ifThenElseFloat(falseBool, 1.2440757514430887, 10.0))), myFloatAdd(10.0, ifThenElseFloat(lessThan(0.01, 0.01), myFloatSub(0.1, 0.1), myIntToFloat(32)))), myAnd(lessThan(myFloatMult(passFloat(0.1), myFloatDiv(10.0, 10.0)), myIntToFloat(myOr(falseBool, trueBool))), equal(myFloatMult(myFloatAdd(10.0, 100.0), myFloatAdd(0.1, 100.0)), passFloat(myFloatAdd(1.0, 100.0)))))
 	With Hash 99cf86aee20a3a87411dfa7fa7d84ab205b1f31f556f93df7be84b638f44b5e8
 	Computed in: 0.00040340423583984375 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: MorphOpenCross(ThresholdBinaryInverse(TfidfVectorizer(TfidfVectorizer(ARG0, falseBool, 7, 6, 1), myNot(trueBool), myOr(trueBool, falseBool), equal(100.0, 0.01), passTriState(1)), passTriState(passTriState(2)), myNot(myOr(trueBool, falseBool))), passTriState(passTriState(passTriState(1))), myIntDiv(passInt(greaterThanEqual(0.01, 1.0)), myIntMult(myAnd(trueBool, falseBool), myIntSub(5, 6))), 84)
 	With Hash 696f6a086cc7bb46bb132da9324131c2b70e1011202cb4973f73947aaff4687c
 	Computed in: 0.00030493736267089844 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: Cv2ScaleAbs(ToFloat(ARG0, 2), 1, notEqual(myFloatAdd(10.0, myFloatSub(myIntToFloat(3), ifThenElseFloat(falseBool, 0.1, 0.1))), 100.0), myOr(trueBool, falseBool))
 	With Hash 5d4e7c71063defa870ef2cdf74cb81987c48cdb3418a0db59db6d44aad40c7a5
 	Computed in: 0.0002503395080566406 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: EmadeDataAddInt(ContourMaskMaxArea(MorphTophatEllipse(ARG0, 2, 128, 32), passTriState(1), myFloatDiv(0.01, 100.0)), 1, 3)
 	With Hash dfdd25bee19a21ad24768fca152722e43f7eaaf26d757d13e6143b4453be43d3
 	Computed in: 0.000202178955078125 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: CornerDetectionHarris(ifThenElseDataPair(myAnd(trueBool, falseBool), adf_0(ARG0), EdgeDetectionCanny(ScalarAdd(MorphDilateRect(ARG0, 1, 100, 7, 50), passTriState(2), myIntToFloat(falseBool)), passTriState(passTriState(0)), passBool(ifThenElseBool(falseBool, falseBool, trueBool)), myIntDiv(lessThanOrEqual(0.1, 100.0), greaterThan(0.01, 0.1)), 0)), passTriState(passTriState(0)), lessThanOrEqual(myFloatMult(0.1, 0.01), myFloatDiv(2.7321518883002476, 1.0)), lessThanOrEqual(ifThenElseFloat(falseBool, 1.0, 0.01), myFloatMult(0.1, 100.0)), myFloatAdd(passFloat(0.01), ifThenElseFloat(trueBool, 0.01, 10.0)))
 adf_0: RandomShuffle(ARG0, 2)
 	With Hash ceacf09328de3dd77085a49261f26dcc844a977b09f81c48537ee30063448d03
 	Computed in: 0.00042176246643066406 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: HighpassFourierEllipsoid(MyDiff(MorphDilateEllipse(GRUNeuralNetwork(myICA(ARG0, 1, 50, falseBool), 4, myFloatToInt(0.1), passTriState(0), myIntMult(trueBool, 100), myNot(falseBool)), passTriState(passTriState(0)), passBool(myNot(falseBool)), notEqual(passFloat(100.0), myIntToFloat(7)), myIntMult(equal(1.0, 0.1), lessThan(0.1, 1.0))), passTriState(passTriState(passTriState(0)))), passTriState(passTriState(passTriState(passTriState(0)))), greaterThanEqual(myIntToFloat(myOr(equal(0.01, 1.0), myNot(trueBool))), passFloat(myFloatAdd(ifThenElseFloat(trueBool, 0.01, 0.1), passFloat(0.01)))))
 	With Hash 85cd00cdb63c47347956b9c5433e5a0daa13d12618deefbc52b76a00f902d0fd
 	Computed in: 0.0003402233123779297 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: Cv2DCT(MorphBlackhatCross(MyProd(Cv2Divide(MeanShiftClustering(ARG0), WindowHamming(ARG0, 0, trueBool), passTriState(0)), passTriState(passTriState(2))), passTriState(passTriState(passTriState(2))), 32, greaterThan(myFloatMult(ifThenElseFloat(falseBool, 100.0, 100.0), myFloatSub(100.0, 10.0)), passFloat(myFloatAdd(0.01, 100.0)))), passTriState(passTriState(passTriState(passTriState(passTriState(passTriState(passTriState(1))))))))
 	With Hash 1a683982e94810d82660ef2f1f6d6bbfa14599cfbe1967da4424cfe7f2056050
 	Computed in: 0.0002694129943847656 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: WindowPlanckTaper(AffinityPropagationClustering(ARG0, myFloatSub(myFloatDiv(ifThenElseFloat(greaterThanEqual(myIntToFloat(1), myFloatSub(0.1, 0.01)), 10.0, passFloat(myIntToFloat(trueBool))), 0.01), myFloatDiv(100.0, 100.0))), passTriState(passTriState(passTriState(0))), passFloat(passFloat(myFloatAdd(myFloatDiv(0.1, 10.0), 1.0))))
 	With Hash 5e17030785ded234e11b3fa8eea407156c3f1500167cd81c8373ab615a91dc06
 	Computed in: 0.00026106834411621094 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: MorphGradientRect(ARG0, 2, myIntDiv(falseBool, 83), 6698)
 	With Hash be0aae620072556375437898fca415b4e58ef13b13b024de039578220fc21c91
 	Computed in: 0.0001976490020751953 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Received: ContourMaskRangeSolidity(agglomerative_clustering(k_means_clustering(WindowGaussian(WindowHann(ARG0, 1, trueBool), passTriState(0), myFloatAdd(100.0, 1.0)), passTriState(passTriState(2))), lessThan(myIntToFloat(myIntAdd(64, 32)), myFloatMult(ifThenElseFloat(trueBool, 0.1, 10.0), ifThenElseFloat(falseBool, 10.0, 0.1)))), passTriState(passTriState(passTriState(passTriState(1)))), myFloatAdd(myIntToFloat(ifThenElseBool(passBool(falseBool), myNot(falseBool), myAnd(falseBool, trueBool))), myFloatAdd(myFloatAdd(myFloatDiv(0.1, -0.169564855904766), passFloat(100.0)), passFloat(passFloat(10.0)))), myFloatAdd(myIntToFloat(passTriState(passTriState(1))), myFloatDiv(myFloatAdd(myIntToFloat(trueBool), myFloatAdd(10.0, 0.1)), myIntToFloat(greaterThanEqual(1.0, 100.0)))))
 	With Hash 2326f1933fcfef62f8d77669436f5f0153a9d1404f45bcf748c1ef5d76e36883
 	Computed in: 0.00037407875061035156 seconds
 	With Fitnesses: (inf, inf, inf, inf)
 	With Age: 0
 	With Error:  Tree missing valid primitive for data type
  At least one objective returned inf. 
 FullDataSet (inf, inf, inf, inf)
 Before Uneval Query | 2020-04-16 03:21:14.491203+00:00
 After Uneval Query | 2020-04-16 03:21:14.676862+00:00
 Status Updated | 2020-04-16 03:21:14.677036+00:00
 Lock Released | 2020-04-16 03:21:14.688457+00:00
 25 to evaluate
* This issue of infinite values should be addressed by the changes I have already made to the EMADE directory, but I haven't been able to test this yet due to mysql issues.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Get EMADE running on PACE-ICE
|Completed
|04/03/20
|04/15/20
|04/15/20
|-
|Test TextRank
|Almost complete
|04/03/20
|04/19/20
|
|-
|Make final presentation
|Completed
|04/14/20
|04/20/20
|04/20/20
|-
|Find a new MySQL solution
|Started
|04/20/20
| --
| --
|}

= April 17, 2020 =
* Trying to fix the tensorflow issue:
** Deleted entire conda environment and emade directory on pace-ice
** Recreated conda env in the scratch directory and symlinked it into my home directory on PACE-ICE to save space, however I am not sure if that made a difference because pace-quota still shows me exceeding my limit:
** [[files/Pace quota.png|506x506px]]
** Continued anyway, and replaced the launchEmade.py file along with the sql_connection_orm_base.py file in emade
** Edited the template file to account for the new location of the conda env:
** [[files/Xmlxml.png|571x571px]]
*** Still no effect
** Replaced the datasets with new datasets provided by Alex to no avail
** Seeemingly fixed the issue by manually installing textblob and then spacy, then running:
 python -m spacy download en_core_web_sm
* Trying to fix the mysqld process already exists error:
** New mysqldb.pbs file:
** [[files/Mysqldpbs.png]]
** MySQL seems to be working, at least.
** [[files/Workingmysql.png|714x714px]]
** MySQL successfully runs sometimes, and other times it fails to start due to an apparent port unavailability.[[files/Mysql log.png|center|thumb|613x613px|MySQL Log]]
**I temporarily resolved the issue by changing the port to 3308 in the .my.cnf file but still had connection issues from EMADE
**Edited mysql user database to resolve connection issues:
 CREATE USER 'root'@'%' IDENTIFIED BY 'password';
 GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
 FLUSH PRIVILEGES;
* EMADE now seems to be running on PACE-ICE with a proper mysql connection! .err file does not show any connection issues.
* [[files/EmadeErrClean.png|474x474px]]

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Get EMADE running on PACE-ICE
|Completed
|04/03/20
|04/15/20
|04/15/20
|-
|Test TextRank
|Stalled
|04/03/20
|04/19/20
|
|-
|Make final presentation
|Started
|04/14/20
|04/20/20
|
|}

= April 10, 2020 =
* Connectivity issues have been slightly reduced by switching over to mobile hotspot temporarily.
* I was able to connect to PACE-ICE over the VPN, although the connection has quite a delay between operations
* Updated the .my.cnf, runEmade, mysqldb files based on discussions with Alex.
** [[files/My.cnf.png|center|thumb|417x417px|.my.cnf file for mysql config]][[files/Run emade.png|center|thumb|600x600px|runEmade.pbs to actually start an EMADE worker]][[files/Mysqld.png|center|thumb|414x414px|mysqldb.pbs to start the mysql server]]
* I had the following issues setting this up:
** The MySQL server would start and then get cancelled on PACE-ICE within a few seconds every time. From the mysql log:[[files/Mysql log.png|center|thumb|613x613px|MySQL Log]]
** To address this issue, I had to stop the mysql process already running on the node by adding the following line to the mysqldb.pbs file:
 /etc/init.d/mysqld stop
* Successfully managed to queue and run MySQL along with EMADE on PACE-ICE:
[[files/Qsub runEmade.png|center|frameless|676x676px]]
[[files/Qstat.png|center|frameless|677x677px]]
* Now the EMADE is having issues with Tensorflow in the logs so I need to figure out how to prevent this.
* [[files/Emade err.png|center|thumb|676x676px|EMADE error logs]]

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Presentations on Monday
|Completed
|03/06/20
|03/09/20
|03/09/20
|-
|Fix connectivity issues
|Completed-ish
|04/03/20
|04/10/20
|04/09/20
|-
|Connect to PACE-ICE
|Completed
|04/03/20
|04/10/20
|04/09/20
|-
|Get EMADE running on PACE-ICE
|Started
|04/03/20
|04/15/20
|
|-
|Test TextRank
|Started
|04/03/20
|04/15/20
|
|}

= April 3, 2020 =
* First sessions after the coronavirus disrupted operations on campus
* Working with Dr. Zutty and the rest of the NLP team to continue operating despite everyone being spread out over different timezones.
* Trying to connect to PACE-ICE from my home in Bangkok has been difficult, mostly because of a spotty internet connection and unreliable speeds.
* Talking to the ISP to see if we can improve connectivity, and exploring alternate options with Dr. Zutty.
* From discussions with the NLP team, we're still trying to get EMADE up and running on pace-ice, and trying to deal with the issues that arose just before the presentation.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Presentations on Monday
|Completed
|03/06/20
|03/09/20
|03/09/20
|-
|Fix connectivity issues
|Started
|04/03/20
|04/10/20
|
|-
|Connect to PACE-ICE
|Started
|04/03/20
|04/10/20
|
|-
|Test TextRank
|Started
|04/03/20
|04/10/20
|
|}

= March 6, 2020 =
* Created conda venv in PACE-ICE.
* Used Alex's environment.yml file to model the environment with the right versions of all dependencies.
* PACE-ICE should now be able to run EMADE with no issues, and we're ready to run different versions of EMADE with different primitives on different nodes of PACE-ICE.
* mysqldb.pbs for running mysqld:
** [[files/Mysqldb.pbs.png|659x659px]]
* runEmade.pbs to start EMADE:
** [[files/RunEmade.pbs.png|827x827px]]

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Set up EMADE to run on PACE-ICE
|Completed
|01/31/20
|02/28/20
|03/06/20
|-
|Create new instance of EMADE on PACE-ICE
|Completed
|02/14/20
|02/28/20
|03/06/20
|-
|Install EMADE dependencies on PACE-ICE and create a venv
|Completed
|02/21/20
|02/28/20
|03/06/20
|-
|Presentations on Monday
|Started
|03/06/20
|03/09/20
|
|}

= February 28, 2020 =
* MySQL on PACE-ICE has been working in a local mode so far. Because of this, we're running the master and all workers on the same node, which is not ideal.
* Pulak is working on making a MySQL process that will run as a master process, and will generate workers that submit themselves in order to take advantage of multiprocessing.
* EMADE has already been written to support multiprocessing, so it is beneficial to be able to run the different workers on different nodes.
* PACE-ICE is down until Saturday 11:59PM, and so we won't be able to connect during the hackathon.
* During the hackathon, we could work on the presentation, creating new primitives, anything else we can think of.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Set up EMADE to run on PACE-ICE
|Delayed
|01/31/20
|02/28/20
|
|-
|Create new instance of EMADE on PACE-ICE
|Delayed
|02/14/20
|02/28/20
|
|-
|Install EMADE dependencies on PACE-ICE and create a venv
|Delayed
|02/21/20
|02/28/20
|
|}

= February 21, 2020 =
* Created a new .my.cnf file to get mysqld to work on PACE-ICE:
** [[files/.my.cnf.png|563x563px]]
* Created a new pbs script to run mysqld on PACE-ICE, which ran successfully:
** [[files/Start.pbs.png|563x563px]]
* Used the guide available at https://docs.pace.gatech.edu/software/mysql/#start-mysql-in-a-job
* Now need to create a virtual environment using conda on PACE-ICE so that we can actually run EMADE on the server.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Set up EMADE to run on PACE-ICE
|Delayed
|01/31/20
|02/28/20
|
|-
|Get MySQL to work on PACE-ICE
|Completed
|02/07/20
|02/14/20
|02/14/20
|-
|Create new instance of EMADE on PACE-ICE
|Delayed
|02/14/20
|02/28/20
|
|-
|Install EMADE dependencies on PACE-ICE and create a venv
|Started
|02/21/20
|02/28/20
|
|}

= February 14, 2020 =
* Issue with git-lfs because PACE-ICE is giving a permission denied error
* New approach will include creating a local copy of stripped down EMADE that can be run on PACE-ICE after being copied over via SFTP
* Alex managed to run MySQL on EMADE but there is an issue where only the first generation is processed. Need to see what the issue is there.
* Perhaps we'll run MySQL on GCP and then connect to that to make things easier
* The issue with MySQL on PACE-ICE seems to be the version: we have 5.1 on PACE-ICE but we need at least 5.7 for EMADE compatibility.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Set up EMADE to run on PACE-ICE
|Delayed
|01/31/20
|02/21/20
|
|-
|Get MySQL to work on PACE-ICE
|Completed
|02/07/20
|02/14/20
|02/14/20
|-
|Create new instance of EMADE on PACE-ICE
|Started
|02/14/20
|02/21/20
|
|}

= February 07, 2020 =
* Everyone now has PACE-ICE ready to use, but there is another issue.
* We need a MySQL server in order to interact with the datasets EMADE uses.
* We've run into issues in this regard, because the MySQL server doesn't seem to start on PACE-ICE.
* Need to figure out how to get a MySQL server up and running on PACE-ICE.
* Some team members are planning to meet on the 9th to figure out how to get MySQL to work on PACE-ICE
* To save space, we'll be running an EMADE instance without git and the unneeded datasets.
* Need to install conda and all the other dependencies for EMADE.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Set up EMADE to run on PACE-ICE
|Delayed
|01/31/20
|02/07/20
|
|-
|Get MySQL to work on PACE-ICE
|Started
|02/07/20
|02/14/20
|
|}

= January 31, 2020 =
* Connected to PACE-ICE successfully, now need to see how to run pbs scripts on it.
* Created Github SSH key for the remote machine and cloned EMADE onto it.
* This presentation has a lot of useful setup information for PACE-ICE
** https://pace.gatech.edu/sites/default/files/presentation_spring2020_0.pdf 
* SHeston3 on GitHub has been able to create an EMADE-oriented pbs script to be run on PACE-ICE in the past.
* Now need to set up an EMADE environment on PACE-ICE.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Connect to PACE-ICE
|Completed
|01/24/20
|01/30/20
|01/30/20
|-
|Set up EMADE to run on PACE-ICE
|Started
|01/31/20
|02/07/20
|
|}

= January 24, 2020 =
* Meetings moved to Klaus VIP room again
* We've come up with a potential way to test primitives after discussions with Dr. Zutty.
* The idea is to use an “island” model when doing testing
** We can run different instances of EMADE with different sets of primitives active
** Run the different EMADE islands for the same amount of time or the same number of generations
** Then compare the results to see which one has resulted in better pareto fronts
** Try to evolve different primitives on their own islands, and then see how much better or worse the performance is when all the primitives are available to EMADE in another instance.
* Need to connect to PACE-ICE and then be able to run EMADE on these servers

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Come up with testable hypotheses
|Completed
|01/10/20
|01/24/20
|1/24/20
|-
|Connect to PACE-ICE
|Started
|01/24/20
|01/30/20
|
|}

= January 17, 2020 =
* What to measure when testing primitives?
** Time it takes to evaluate individuals
** Variance
** Accuracy/AUC

* We should be able to use PACE-ICE servers to run EMADE this semester.
* Google Cloud Platform credits are available too
* Discussed statistics briefly as well to understand the kind of data we'll need to collect to effectively test.
* Need to figure out how to apply statistical methods to EMADE.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Come up with testable hypotheses
|Delayed
|01/10/20
|01/24/20
|
|}

= January 10, 2020 =
* Presentation on statistics and hypothesis testing
* We want to run some tests on the primitives we built last semester in order to figure out whether or not they were actually effective.
* How to prove whether or not we're making changes that benefit EMADE?
* Will use t-statistic to test
* Python's SciPy library can be used to do some of the testing quite easily
** Scipy.stats
** Ttest_ind

=== Issues ===
* No clear hypothesis to test
* Will need to do a t-test without population mean and std. deviation, using Welch's t-test.
* How to design experiments?

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Come up with testable hypotheses
|Started
|01/10/20
|01/17/20
|
|}

= December 2, 2019 =
* Final Presentations are today.
* https://docs.google.com/presentation/d/1KPcNsmbxPipkDncRDKeScHZCRR71gXoDNyumCGimTVc/edit#slide=id.g6bd390a1d0_17_62
* [[files/TextRankSlides.png|675x675px]]

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Work on Presentation
|Completed
|11/25/19
|12/02/19
|12/02/19
|}

= November 25,  2019 =
* Modified originally created primitive to be usable in EMADE, but I think some modifications can be made in order to make the code more efficient.
* Current inefficiencies:
** The current approach uses GloVe which may not be the best way to implement word vectors.
** The GloVe word embeddings are 800MB+ so this is a consideration when trying to minimize bloat in EMADE.
* I wasn't able to make it to the meeting on Monday due to Thanksgiving Break so I talked to Alex about making the final changes needed to make the primitive usable in EMADE.
* After some optimizations, the final TextRank primitive looks like this:
** [[files/TextRankimg.png|760x760px]]

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Modify primitive to work in EMADE
|Completed
|11/18/19
|11/28/19
|11/25/19
|-
|Work on Presentation
|Started
|11/25/19
|12/02/19
|
|}

= November 18, 2019 =
* Working to implement TextRank primitive in EMADE.
* [[files/EMADEConversion.png|500x500px]]

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Modify primitive to work in EMADE
|In progress
|11/18/19
|11/28/19
|
|}

= November 15, 2019 =
* Talked to Alex and modified some of the code for TextRank
* Made the program return a set of numbers representing the sentence ranks, as opposed to the sentences themselves.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Create a primitive for the text-summarization subteam
|Completed
|11/01/19
|11/08/19
|11/08/19
|}

= November 8, 2019 =
* I read a paper about Extractive Automatic Text Summarization: https://www.sciencedirect.com/science/article/pii/S1877050915006869
* Decided to create a TextRank primitive to be run in EMADE
* Used online sources as a guide
* [[files/TextRank1.png|681x681px]]
* [[files/TextRank 2.png|681x681px]]
* [[files/TextRank 3.png|678x678px]]

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Create a primitive for the text-summarization subteam
|Started
|11/01/19
|11/08/19
|11/08/19
|}

= November 1, 2019 =
* I was unable to make it to the Friday meeting, but read the papers Mohan asked me to, and will be working on creating a primitive for the text summarization subteam.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Work with text-summarization NLP subteam on Friday
|N/A
|10/28/19
|11/01/19
|11/01/19
|-
|Create a primitive for the text-summarization subteam
|Started
|11/01/19
|11/08/19
|
|}

= October 28, 2019 =
* I decided to join the NLP subteam of VIP-AAD, and specifically decided to work on text summarization.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Think about what subteam to join
|Started
|10/21/19
|10/28/19
|10/28/19
|-
|Work with text-summarization NLP subteam on Friday
|N/A
|10/28/19
|11/01/19
|
|}

= October 21, 2019 =
* Final presentation today: https://docs.google.com/presentation/d/1nDlbacJ5zTDk5g6c5B92MEgx5rw3qAewIVchtNYQnzk/edit#slide=id.g6415576cd1_1_44
* Peiqi dropped out of the VIP
* Summarized the work we have done in the bootcamp so far
* Compared results for the Titanic Dataset when working with ML, MOGP, and EMADE.

=== ML Assignment Reflections ===
* [[files/MLsummary.jpg|622x622px]]

==== Learnings from ML Assignment ====
* Gained basic knowledge of machine learning algorithms
* Understood the meaning of codominance
* Gateway to understanding how to work with GA and GP

=== MOGP Assignment Reflections ===
* [[files/MOGP summary2.jpg|624x624px]]
* [[files/MOGP summary.jpg|624x624px]]

==== Learnings from GP Assignment ====
* Understanding how to apply GP and work with evolutionary learning
* Creating an evaluation function to get the FNR/NPR values
* Thinking about different objectives that could be used for evaluation
* The difference between different kinds of crossover techniques and mutation techniques
* Using built in evolutionary loops within DEAP

=== EMADE Assignment ===

==== Initial Issues ====
* Getting EMADE installed on everyone’s computers, spanning multiple platforms and environments was a difficult process.
* Spent a lot of time in the VIP lab trying to learn how to get everything set up
* Getting a MySQL server running and able to accept connections created a lot of issues
* EMADE seemed to generate some individuals and then stop running after a while, so we needed to understand how to fix that.

==== Using EMADE ====
* We set up a local MySQL server on one computer and everyone else connected to it as workers.
* We played around with the database and explored
* Tried modifying probabilities of crossover and mutation methods to see results
* We used the default feature processing provided by EMADE for our test runs

==== Final EMADE Pareto Front ====
[[files/EMADE summary.jpg|626x626px]]

==== Conclusions ====
* EMADE takes a lot longer to create multiple generations that lower the AUC over time, however can be more effective at optimization.
* Different approaches give different results based on the level of processing.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Complete new EMADE Assignment
|Working on it
|10/09/19
|10/21/19
|10/21/19
|-
|Think about what subteam to join
|Started
|10/21/19
|10/28/19
|
|}

= October 16, 2019 =
* Time given for setting up MySQL server and emade.
* We're running into many different issues getting emade running on our computers, so we are talking to Jason and James to figure out how we can get everything set up and running
* Decided not to run emade in the cloud because that would require additional resources.
* We're not sure what to do after we get a server successfully running.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Complete new EMADE Assignment
|Working on it
|10/09/19
|10/21/19
|
|}

= October 9, 2019 =

=== Introduction to EMADE ===
* Evolutionary Multi-objective Algorithm Design Engine.
* GitHub Repository: https://github.gatech.edu/emade/emade
** Installation instructions are on the README.md
* It combines a multi-objective evolutionary search with high-level primitives to automate the process of designing machine learning algorithms.
* The input file for emade is an xml document that basically configures everything relevant in EMADE.
* Also need to configure a MySQL connection to use .
* EMADE can use multiple datasets, and the titanic problem only had one dataset.
* The slides for today's lecture contain information stepping through the different files and explaining how to set up an EMADE instance.

=== Assignment ===
* Run EMADE as a group. 1 person should set up the SQL server and act as the master process, and others should ocnnect their workers
* Run for a substantial number of generations
* Learn some SQL: focus on the individual table and learn some useful commands
* Make a plot of the non-dominated frontier at the end of the run, compare with ML and MOGP assignments
* Make any other plots and figures to show your analysis of EMADE running on the Titanic problem, and see if you can find some successful trees!
* This assignment will have a presentation on the 21st of October. Do not wait until the last minute to get EMADE working.

Slides from lecture will be available soon.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Complete new Titanic Problem
|Completed
|09/25/19
|10/2/19
|10/1/19
|-
|Install Emade
|Completed
|10/02/19
|10/09/19
|10/09/19
|-
|Complete notebook for grading
|Completed
|10/02/19
|10/04/19
|10/04/19
|-
|Complete new Assignment
|Started
|10/09/19
|10/21/19
|
|}

= October 2, 2019 =
* Presentations for Titanic GP Problem today.
* Presentation link: https://docs.google.com/presentation/d/1nOBkBBZlXKNpkpiklO-IvuAoEmPrEtOjIKG4s5BieRw/edit#slide=id.g62ca840fc5_7_0

=== Summary of Project ===
* We had a lot of difficulty getting started; everyone in the group seemed to know what we had to do conceptually, but we were not sure where to start.
* We met up 3 or 4 times outside of class in order to work on the project, with some progress made every meeting.
* Talking to James helped us quite a bit as he was able to clear up our misconceptions quite well and he also helped us understand the objective better.
* In the end, we ended up using Lab 2 as a guideline for this project.
* Used the same features as last time (PClass, Sex, Age, SibSp, Parch, Fare)
* Used deap instead of Sklearn's ML algorithms
* Created 100 unique codominant individuals, ended up with 157
* Plotted the pareto front of the 100 best individuals
* Calculated area under the curve over generations
* Primitives used: add, subtract, multiply, divide, sin, cos, etc.
** [[files/Primitives.png|589x589px]]
* We had to pick a fitness / evaluation function that was multi-objective since we wanted to minimize both FPR and FNR
** [[files/Evaluation Function.png|590x590px]]
* After research and discussions with James we found NSGA-II (Non-Dominated Sorting Genetic Algorithm)
* We used mu + lambda as our genetic algorithm since it takes not only the best individual from a given generation but also the best individuals from the generation before
* I made the graph of the AUC over generations using matplotlib by keeping track of the 100 best AUCs as the evolutionary algorithm ran.
** [[files/AUC.png|579x579px]]
** [[files/AUC2.png|441x441px]]

=== Issues ===
* Understanding how to connect Lab 2 knowledge to this new scenario
* Creating an evaluation function to get the FNR/NPR values
* Originally, we kept getting 0 for area under the curve at random points in our evolution.
* To solve the issue with getting an increasing AUC/0 AUC, we tried modifying the probability of crossover and mutation.

Overall, the area under the curve decreased from ~0.37 in the first generation to ~0.11 in the 150th generation. We would consider this assignment a success as a result of this.[[files/Final Pareto Front, AADBootcampSubteam1.png|none|thumb|437x437px|Final Pareto Front]]

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Complete new Titanic Problem
|Completed
|09/25/19
|10/2/19
|10/1/19
|-
|Install Emade
|Started
|10/02/19
|10/09/19
|
|-
|Complete notebook for grading
|Started
|10/02/19
|10/04
|
|}
= September 25, 2019 =
* Project for next week:
* We are going to continue working on the Titanic ML Problem
* Simple primitives
* Use Lab 2 as a skeleton
* Multiple objectives
* We want to create a basic evolutionary algorithm
* End result: We want a non-dominated frontier.
** Significantly more individuals, each of which is a tree. Better FN/FP ratio.
** If you have a 100 pareto individuals in the end, you need to provide 101 columns where the first column is the passengerID and the other columns are the predictions of each individual.
* We want to create a Riemann sum at the end that calculates area under the curve of the graph.
* We also want a non-dominated plot of the different individuals.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Complete new Titanic Problem
|Started
|09/25/19
|10/2/19
|
|-
|Complete Titanic Problem
|Completed
|09/11/19
|09/18/19
|09/18/19
|}
= September 18, 2019 =
* The Titanic ML Project has been completed
* We did a team discussion on which features of the data to drop, and also used correlation functions on individual features to decide their usefulness in the data.
* Of the different models we used to predict survival rates of passengers, the Random Forest model turned out to have the highest accuracy rate, with a success rate of 84%.
* Presentation Link: https://docs.google.com/presentation/d/1x_8xfFspcMqOYNSju7Hl3QtAJquGAbR2QhAp6xskn5w/edit?usp=sharing

==== Summary of Project ====
* Decided to use the following features:
** PClass
** Sex
** Age
** SibSp
** Parch
** Fare
* We used SciKit Learn for the training models.
* Used Pandas for data manipulation
* Also used deap
* Basic data cleaning:
** [[files/Basic data cleaning.png|587x587px]]
* Training using RandomForest:
** [[files/RandomForest.png|577x577px]]
* Graph of feature importance:
** [[files/FeatureImp.png|590x590px]]

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Finish the second half of Lab 2
|Completed
|09/04/19
|09/11/19
|09/11/19
|-
|Complete Titanic Problem
|Completed
|09/11/19
|09/18/19
|09/18/19
|}

= September 11, 2019 =
* We are in Subteam 1: Aryender, Pulak, Anshul, Ford, Joseph, Peiqi
* We will be designing a machine learning model to solve the problem of: https://www.kaggle.com/c/titanic
** This has multiple objectives
* We need to create 5 different algorithms that become co-dominant.
* We have created a GitHub Repository: https://github.gatech.edu/pagarwal80/VIP_AAD_subteam1

=== Lab 2 ===
* When working on Lab 2, I saw that we needed to try and reduce the area under the curve of the pareto front in order to get a higher accuracy.
* As I was working through the code, I saw that some of the things we could easily change would be:
** Minimum tree depth
** Maximum tree depth
** Types of primitives selected
** Number of generations
* From my discussions with Alexander during the helpdesk sessions I learned that the tree depth would be important in making the algorithm more accurate
** This is because a higher tree depth allows more complexity and perhaps more precision
* I implemented this change, and also adjusted the primitives.

==== Original Pareto Front: ====
[[files/Original Pareto Front.png|none|frame|323x323px|Original Pareto Front]]

==== Changes Made: ====
* Kept original primitives (add, subctract, multiply, negative) and removed sin, cos
* New tree depth: Minimum: 2, Maximum 7
* 100 generations instead of 40
* Populations = 100 instead of 300
[[files/New Tree Depth.png]]

==== New Pareto Front: ====
[[files/New Pareto Front.png|none|frame|320x320px|New Pareto Front]]

As a result, the area under the curve is now much lower.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Finish the second half of Lab 2
|Completed
|09/04/19
|09/11/19
|09/11/19
|-
|Complete Titanic Problem
|Started
|09/11/19
|09/18/19
|
|}

= September 4, 2019 =
* Remember that the second part of Lab 2 is due next week.
* Help Desk Thursday 4:30 - 6:00 and Friday

=== Introduction to Multiple Objectives Programming ===
* We have multiple requirements when dealing with algorithms in this project.
* The algorithms must address the following requirements:
** Time efficiency
** Memory efficiency
** Precision
*** Minimize errors (misclassification)
*** True Positives
*** Minimize False Positives
** Security
** Usability (Human Computer Interface)
** Cost effectiveness
* Today’s lecture focuses the translation of the vector of scores from evaluation into a fitness value.

* Gene pool is the set of genomes to be evaluated during the current generation
** Genome
** Genotypic description of an individual
** DNA
** GA = set of values
** GP = tree structure, string

* Search Space
** Set of all possible genomes
** For Automated Algorithm Design:
*** set of all possible algorithms

* Objective Space – Set of objectives
** Evaluation – Maps an genome/individual
*** From a location in search space
**** Genotypic description
*** To a location in objective space
**** Phenotype description

=== Maximization Measures ===
* Sensitivity of True Positive Rate (TPR)
** AKA Hit Rate or Recall
** TPR = TP/P = TP/(TP+FN)
* Specificity (SPC) or True Negative Rate (TNR)
** TNR = TN/N = TN/(TN+FP)
* The algorithms with the '''highest''' '''TNR/TPR''' will have the '''highest''' chance of mating.

=== Minimization Measures ===
* False Negative Rate (FNR)
** FNR = FN/P = FN/(TP+FN)
** FNR = 1 - TPR
* Fallout or False Positive Rate (FPR)
** FPR = FP/N = TN/(FP+TN)
** FPR = 1 – TNR = 1 - SPC
* The algorithms with the '''lowest''' '''FNR/FPR''' will have the '''lowest''' chance of mating.
[[files/Slides Screenshot Sept 4 2019.png|none|thumb|599x599px]]
* We're trying to do selective breeding with algorithms by optimizing phenotypes.
* We want pareto-dominant scores. 

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Finish up the first half of Lab 2
|Completed
|08/28/19
|08/30/19
|08/30/19
|-
|Figure out a workable programming environment
|Completed
|08/29/19
|08/30/19
|08/30/19
|-
|Finish the second half of Lab 2
|In Progress
|09/04/19
|09/11/19
|
|}

= August 28, 2019 =
* We can represent a program as a tree structure.
** Nodes are called primitives and represent functions.
** We use lisp to represent the trees.
** Parse trees are pre-order representations of the trees.
* Crossover in tree-based Genetic Programming is simply exchanging subtrees.
** We start by randomly picking a point in each tree, and then these points and everything below become subtrees.
** The subtrees are exchanged to produce children.

=== Mutation in GP ===
* Mutation can involve:
** Adding, removing nodes
** Changing terminals
** Making changes to entire subtrees

=== Example: Symbolic Regression ===
* Using simple primitives, use genetic programming to evolve a solution to y = sin(x)
* Primitives include:
** +,-,*,/
* So we need the Taylor series for sin(x)
** f(x) = x - (x^3)/3!
*Having more complex operators will allow us to make this easier.
**Power(), Factorial(), Sin(), Cos(), Tan() are all available too.

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Finish up the first half of Lab 2
|In progress
|08/28/19
|08/30/19
|
|-
|Figure out a workable programming environment
|In progress
|08/29/19
|08/30/19
|
|-
|Join the slack
|Completed
|08/21/19
|08/21/19
|08/28/19
|-
|Create notebook
|In Progress
|08/21/19
|08/28/19
|08/28/19
|}

= August 21, 2019 =

=== Concept of Genetic Algorithms ===
* With genetic algorithms, each new generation is created through mating/mutation of individuals in the previous population (then their fitness is evaluated). Through numerous operations of this process, it will eventually produce the best individual - one whose fitness is better than everyone else’s in the population and cannot get any better.

=== Keywords ===
* Individual: one specific candidate in the population (with properties such as DNA)
* Population: group of individuals whose properties will be altered
* Objective: a value used to characterize individuals that you are trying to maximize or minimize (usually the goal is to increase objective through the evolutionary algorithm)
* Fitness: relative comparison to other individuals; how well does the individual accomplish a task relative to the rest of the population?
* Evaluation: a function that computes the objective of an individual
* Selection: represents ‘survival of the fittest’; gives preference to better individuals, therefore allowing them to pass on their genes
** Fitness Proportionate: the greater the fitness value, the higher the probability of being selected for mating
** Tournament: several tournaments among individuals (number of individuals in each tournament is dependent on tournament size); winners are selected for mating
* Mate/Crossover: represents mating between individuals
* Mutate: introduces random modifications; purpose is to maintain diversity

*[[files/Anshul Lecture Slide Screenshot 1.png|frameless|749x749px]]
* This is a heuristic solution: there is no guarantee that you have the best possible solution at the end of this algorithm: You just know if it's decently good enough for your specs or not.
* Here it is possible to have a perfect solution, but that's because it is an example
* Next Steps: '''Genetic Programming'''

=== Todo: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Join the slack
|Completed
|08/21/19
|08/21/19
|08/28/19
|-
|Create notebook
|In Progress
|08/21/19
|08/28/19
|08/28/19
|}