'''Name:''' Austin T. Peng

'''Email:''' [mailto:apeng39@gatech.edu apeng39@gatech.edu]

'''Cell Phone:''' 510-364-3210

'''Interests:''' Machine Learning, [https://sites.google.com/view/gtclubtennis Tennis], Traveling, Cooking

= Fall 2021 =
== Week 1: August 25, 2021 ==
=== Lecture Overview ===
* syllabus (grading, notebook)
* genetic algorithms lecture
* introduction to Jupyter notebook and lab 1
=== Lecture Notes ===
* The concept of genetic algorithms is that each new generation of algorithms is created through the mating or mutation of individuals in the previous population. Through manny iterations of this process, it produces the best individual.
* Mating or crossover is the creation of a new algorithm using a specified number of parts of the previous algorithm depending on the number of split points.
* A mutation introduces random modifications to the algorithm in order to help maintain diversity.
* A simple genetic algorithm problem is the One Max problem which essentially wants to produce a list of all 1's given a list of binary numbers.

=== Lab 1 ===
==== Part 1: One Max Problem ====
* The objective of this problem is to create a genetic algorithm that returns the maximum amount of 1s in a binary list of size n.
** When I ran the algorithm with a much larger population (n=10000) it seemed like it took less generations for the an individual in the population to reach maximum fitness.

==== Part 2: N Queens Problem ====
* Learning Points
** Python map(function, iterable) takes a function and maps an iterable (tuple, list, etc.) to it
** Python zip() takes in iterables and returns an iterator of tuples with each tuple having elements from all the iterables
** Python slicing arr[start:stop:step] (start through not past stop, by step)
** arr[:] makes a shallow copy of the array
** you can resize an array to a desired length using [0] * size

* My Mutation Methods
 <nowiki>def mutOppositeHalves(individual, indpb):
    """ Randomly picks two indexes from each half of the individual and swaps them with a probability of indpb.
    
    :param individual: Individual to be mutated.
    :param indpb: Independent probability for each attribute to be exchanged to
                  another position.
    :returns: A tuple of one individual.
    """
    
    size = len(individual)
    front_half = random.randint(0, size/2)
    back_half = random.randint(size/2, size-1)
        
    individual[front_half], individual[back_half] = individual[back_half], individual[front_half]
    return individual,</nowiki>

 <nowiki>def mutRandomHalves(individual, indpb):
    """ Randomly picks a "midpoint" from the individual and picks two indexes from each half of midpoint,
     swapping them with a probability of indpb.
    
    :param individual: Individual to be mutated.
    :param indpb: Independent probability for each attribute to be exchanged to
                  another position.
    :returns: A tuple of one individual.
    """
    
    size = len(individual)
    midpoint = random.randint(0, size-2)
    
    front_half = random.randint(0, size/2)
    back_half = random.randint(size/2, size-1)
        
    individual[front_half], individual[back_half] = individual[back_half], individual[front_half]
    return individual,</nowiki>

** To test the effectiveness of my mutation methods, I ran each evolution (100 generations) 100 times and plotted the fitness values.
** I saw that my mutOppositeHalves() method performed the best, finding the global minimum of 0, 60 out of 100 evolutions. My mutRandomHalves() and the provided mutShuffleIndexes performed slightly worse producing the global minimum approximately 55 times out of 100 evolutions.

=== Questions ===
* How do I format my code properly? The def function(): part of my code is missing.
* How do I add images to my notebook.

'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Install DEAP
|Completed
|August 25, 2021
|September 1, 2021
|August 26, 2021
|-
|Lab 1
|Completed
|August 25, 2021
|September 1, 2021
|September 1, 2021
|-
|Update Notebook
|In Progress
|August 25, 2021
|September 1, 2021
|
|}

