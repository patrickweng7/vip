== Team Member ==
Team Member: Carissa Ghazalie

Email: cghazalie@gatech.edu

== January 13, 2019 ==
Anthony and I will be part of a user-testing subgroup.

'''Team Meeting Notes:'''

* '''Weekly out-of-class meetings Wednesdays @ 4:30 PM (VIP room)'''
* Split the sub-team into smaller sub-teams 
* One sub-team will work on refactoring code, and one sub-team will work on user testing
* Looked over and discussed possible future directions for our sub-team 
* ''Came up with a general list of things that we want to accomplish''
** Visualization of the ancestral lineage (object score of the parents/grandparents that resulted in the current individual?)
** Visualization of evolutionary processes 
** Refactor code and make aesthetics more appealing
** User testing:
*** Create a survey and get feedback from other users
*** Use data from other sub-teams 
*** Host code on heroku
*** Add documentation for those who want to run it locally

== January 23, 2019 == 
'''Team Meeting Notes:'''
* '''Team members got viz running''' 
* Anthony got the website up on heroku
* Aesthetics fixed by Jeffrey

== January 30, 2019 == 
We've decided to scrap the idea of using heroku because it over-complicated things. 

'''Team Meeting Notes:'''
* Discussion:
** Is the heroku app viable?
*** It seems like we're fixing a problem that isn't there (no simple way to connect database)
*** Heroku app was meant to be simpler
**** A lot of code needs to be written to set up uploading a csv
** Not too difficult to have user set up emade viz

* Group to dos:
** Create a guide for setting up emade viz with a virtual environment
** '''Meet to discuss testing with other teams'''
** Fix AUC graph 
** Change around dashboard UI
** Talk to Jason about hereditary visualizations
** Visualization of number of pareto individuals over time
** Make sure all code is merged!

== February 4, 2019 == 
'''Team Meeting Notes:'''
* Change emade to keep track of individuals' history
* Two visualizations
** Lineage visualization in objective space
*** Track the lineage of an individual on a plot of the objective space 
*** Genotypic visualization 
**** See where a tree is mutated
**** What did each parent contribute?
* Future ideas:
** Manual editing of individual trees 
** Be able to drag and drop nodes and connections

== February 6, 2019 == 
'''Team Meeting Notes:'''
* Progress: 
** '''Anthony & I: Guide created for setting up emade-viz with virtual environment''' 
** Michael: AUC graph fixed (not hard coded!) 
** Jeff, Will, & Sierra: Dashboard UI updated -- looks great
** Suraj: Visualization of number of pareto individuals over time
** Team: Talked to Greg about future hereditary decorations // all code from last couple of weeks merged

* To Do's:
** Add a column for parents' hashes (Will, Michael)
** '''Reach out to EEG team for datasets (Suraj, Anthony, me)'''
** Finish the user study materials (Anthony, me) 
** '''Set up user studies with EEG team and first-year students (Anthony, me)'''
** Create yml file for requirements and environment set up (Anthony)
** Get emade and emade-viz running in parallel (Jeff, Suraj, Sierra)
** Get emade running on Google cloud (Jeff, Suraj, Sierra)

== February 13, 2019 == 
Anthony has reached out (via the general slack) to people who may be interested in participating in our user studies. We are currently waiting on the first-semester students to finish up their bootcamp so that they can run emade on their machines; once they are able to run emade, we should be able to begin with user testing. 

'''Team Meeting Notes:'''
* To Do's:
** '''Create a graph for total evaluation time per generation - me''' 
** Get ancestry from emade - Will & Michael
** Run additional dataset (other than titanic) - Suraj & Jeffrey
** Error handling for logging in - Sierra
** Missing column error message - Sierra
** Redirect from login page to dashboard w/update button - Sierra
** Live update doesn't work without refreshing, fix - Anthony
** Run emade-viz on Google Cloud - Anthony
** Slider bar for previous generations (once refresh speed is fixed)
** Add pop-up to show additional information about individuals in pareto front visualization when clicked - Jeffrey
** Box and whisker plot for evaluation time per individual per generation - Suraj 

== February 20, 2019 == 

I originally had some issues querying into the database, but I was eventually able to successfully query our database. I completed my graph for the total evaluation per time generation (as noted in the to do list for 2/13/19). I used the bokeh library to create the graph using python. 
[[files/Total eval per time gen.png|thumb]] 

'''Team Meeting Notes:'''
* To Do's: 
** Keep track of ancestry for individuals - Michael
** '''Run the Google Cloud instance - Anthony & me'''
** Generational slider/player - Anthony & Sierra
** Improve documentation for running Google Cloud Instance of emade - Suraj 
** Work on other versions of graphs that only take into account non-error'd individuals - Suraj
** Fix cookies bug with updating database - Will
** Make onClick tree display on the dashboard instead of making new page - Jeffrey 

== February 25, 2019 == 

I need to book a breakout room in the CULC for 3/1 @ 12:30pm so that Anthony and I can do a user-study test with a first-semester student.
We ended up having to reschedule to 3/2 (Saturday), and I was unable to make it, so Anthony did the user-study with the first-semester student.

== February 27, 2019 ==

I began to (attempt to) run a Google Cloud instance of emade. Other group members and I ran into some issues while doing so, so we'll continue to work on it during our next meeting / as time permits.
* Since last meeting
** Michael and Will - Working on bugs that they are getting when running EMADE
** Carissa - Set up meeting with first-year for Friday
** Suraj - Finished eval time per ind per gen graph for only valid individuals
** Jeff - Got the tree to be a popup instead of a tooltip
* To Do's:
** Finish debugging EMADE hierarchy changes so that they can get it added to EMADE - Will, Michael
** '''Meet with Yash and do user testing - Carissa, Anthony'''
** '''Run Google Instance - Carissa, Sierra, Jeff, Anthony'''
** Pull request code in - Jeff, Suraj
** Generational slider - Anthony, Sierra
** Make Google Cloud EMADE guide - Suraj
** Start saving XML info in db - Suraj
* Documentation Outline
** Getting Google Cloud credits
** Creating a project
** Ensuring the credits are linked to the account
** Creating a VM Instance
** SSHing into instances
** Copying a bucket

== March 6, 2019 ==
* Since last meeting 
** Hereditary information now seems to be stored - Will and Michael
** Put metadata from XML into database - Jeff
** Got us more money (Google cloud) - Suraj
** '''User study with Yash - Anthony and Carissa'''
** Made changes based to documentation and login feedback - Anthony and Sierra

* Goals
** Create a visualization that shows all the individuals 
** Take into account other objectives
** Add evaluation time to the 

* Task list
** Finish presentation - Whole team
** Conduct another user study - Anthony and Carissa
** Merge changes - Whole team  '''User Study with 1st-semester student:'''
** Went really well!
** Major takeaways
*** We need to specify that EMADE-Viz runs completely seperately from EMADE
*** Should just write out the specific command to create an environment from the yml file
*** Extra packages in the requirements and environment file should be deleted
*** We should add instructions related to creating the database with a csv or getting it from the person running the EMADE master instance
*** Database connection instructions are really bad and need to be reworded
*** Database connection success/failure have 0 feedback
** Task List
*** Write a note at the top of EMADE-Viz that talks about how the application runs completely separately from EMADE
*** Write out the commands to be run with Anaconda to create the environment
*** Delete extra packages
*** Add instructions about creating the database or getting it from the person running the EMADE master instance
*** Revamp database connection instructions
*** Redirect the user to dashboard on success of connecting to database
*** Show red text 'Failed to connect to database' on failure of connecting to database

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Finish up presentation
| Complete
|3/6/2019
|3/11/2019
|3/10/2019
|-
|-
| Conduct another user study with Anthony 
| Complete
|3/6/2019
|3/9/2019
|3/9/2019
|-
|}

== March 27, 2019 ==
Held a brief meeting - not too many updates with the group since spring break was last week. 
* Meeting Notes
** Data Storage to minimize database queries- Nicole & Beck
** Emade metadata- Jeff
** Graph coloring- Michael 
** Hereditary visualization-Will
** Merge our branches - Suraj & Sierra
** User studies - Anthony & Carissa

== April 3, 2019 ==
Anthony & I haven't been able to schedule many user studies yet.
* Progress
** Anthony - Merged Sierra and Suraj’s branch
** Bec - Worked on speeding up processes through optimizing # of sql calls
** Carissa - Not too much because there were no user studies
** Jeff - Creating metadata table through emade
** Michael - Added colors to the tree graph so that the type of node can easily be determined, it’s also pretty
** Nicole - Worked on speeding up processes through optimizing # of sql calls
** Sierra - Worked on merging branches
** Suraj - Worked with Anthony to fix bugs with merging

* Task list
** Anthony - Go through user study feedback and fix stuff
** Bec - Continue working on speeding up processes through optimizing # of sql calls
** '''Carissa - Work on segregating generational from aggregate view (based on user feedback)'''
** Jeff - Error checking for empty meta table, fixing auc
** Michael - tinker with color palette a bit, more robust tree parsing
** Nicole - Work with Anthony to catch up on:
*** Git
*** MySQL
*** Continue working on speeding up processes through optimizing # of sql calls
**Sierra - Question mark tooltip
** Suraj - UI updates
** Will - Working on hierarchy visualization

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Separate visualizations on the dashboard based on whether it's aggregate data or individual data
| Complete
|4/3/2019
|4/10/2019
|4/8/2019
|-
|}

== April 10, 2019 ==
I created a branch called separate_dashboard_components so that I could work on separating the visualizations on the main dashboard. 
* Progress
** Michael - changed tree colors, fixed tree parser
** Nicole - looked over resources to get up to speed
** Sierra - Added in tooltips
** Jeff - fixed AUC, dynamic xml for auc
** Anthony - Implementing some of the changes from the user study, got resources to Nicole
** Carissa - worked on separating the visualizations into generational and aggregate.

* To-Do:
** Anthony - Merge everything in, finish implementing changes from the user study, export graph pictures
** Sierra - add a specific tooltip icon
** Jeff and Suraj - XML upload functionality and trying other data sources
** Michael and Will - Hierarchy visualization (fixing SQL logging errors)
** Nicole, Gabe, and Bek - Reduce the number of times we are making calls to the database

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Do peer evals
| Complete
|4/12/2019
|4/23/2019
|4/16/2019
|-
|}

== April 17, 2019 ==
I added buttons to the tool's sidebar so that users can navigate to either the dashboard, aggregate data, or individual data. Since I've pushed my code to my github branch, Anthony is working on merging the code with master. Everyone worked on their part of the final presentation during this meeting.
* Progress
** Suraj - Working on input XML
** Nicole - Finished the Pickle file with first-years
** Bek - Finished the Pickle file with first-years
** Gabe - Finished the Pickle file with first-years
** Sierra - Made login more user-friendly 
** Jeff - Working on input XML
** Anthony - Export graphs functionality done 
** '''Carissa - Added buttons to the sidebar to reflect the newly separated graphs''' 
** Will - working on the hierarchy visualization

* Task list
** '''Everyone - work on the presentation'''
** Anthony - merge in code
** Will & Michael - Trying to finish hierarchy visualization
** Suraj & Jeff - Work on input XML

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Work on final presentation 
| Complete
|4/17/2019
|4/22/2019
|4/17/2019
|-
|}


== Final Notes ==
I feel like the amount that I contributed to the group deserves a B, but my effort deserves an A. I feel like I was on the weaker side of contributions for my group because I wasn't as knowledgeable as everyone else, but I contributed what I could and put in my best effort. I did what was asked of me and would seek out the right tools/help from people if I was unable to figure things out on my own. 



'''Action Items: (This list is old and newer to-do items are individual now)'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Get emade to run
| Complete
|1/13/2019
|1/23/2019
|1/20/2019
|-
|-
| Create user testing survey
| Draft created (changes possible, currently a google survey <nowiki>https://goo.gl/forms/du9wpMsS8r2ol5zU2</nowiki>)
|1/13/2019
|1/23/2019
|1/22/2019
|-
|-
| Add heroku as remote
| Complete
|1/23/2019
|1/28/2019
|1/28/2019
|-
|-
| Conduct user testing (get feedback from other groups)
|Booked a breakout room in the CULC 3/1 for one user study (ended up having to reschedule)
|1/30/2019
|n/a until 1st semester students run emade
| 
|-
|Create graph for SQL query
|Complete
|2/13/2019
|2/20/2019
|2/20/2019
|-
|Run the Google Cloud instance
|In progress
|2/20/2019
|
|
|}


== Week 3, Fall 2019: September 6, 2019 ==
Had the first team meeting with other students with a time conflict. We went around and figured out who would be joining what sub-teams. I joined the "Research Fundamentals" sub-team and met the current group members and discussed what the group focuses on. 

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Read papers (neat-GP, bloat control papers) 
| Completed
|9/6/2019
|9/13/19
| 9/13/19
|-
|}

== September 10, 2019 == 
Read through the neat-GP paper. 
Didn't take notes, but highlighted while reading (viewable here: https://drive.google.com/file/d/1Y4PQrvX19uTWaYrKV4HcbKKsDxvWnTQk/view?usp=sharing)

Skimmed through the other research papers on bloat - didn't really take notes because the information was similar to what was provided in neat-GP

== September 13, 2019 ==
* Met with other time conflict students
* Discussed next steps for next week 
** Figure out how to quantify bloat 
** Try to get neat-GP running and test it on known examples from the neat-GP paper

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Work on quantifying bloat 
| In progress
|9/13/2019
|9/20/19
| 
|-
|}

== September 20, 2019 ==
* Didn't really understand how to code bloat metric and couldn't find the cache table in the emade code 
* Not too much happened during our meeting - planning to meet with Jeffrey sometime next week to figure out how to work on bloat metrics 

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Meet with Jeffrey to work on bloat metrics, same to-do as last week  
| Met but didn't make too much progress - found the cache table in the detection_proessing branch but wasn't sure what to do 
|9/20/2019
|9/25/19
| 9/25/19
|-
|}

== September 30, 2019 ==
* Met with Jeffrey to work on bloat metrics 
* Got emade running of Jeffrey's laptop but not mine 
* We couldn't get emade to give us data with bloat after running it for a while, so we decided that we would write code based on dummy data


== October 1, 2019 ==
* Met with Jeffrey to work on bloat metrics (using dummy data) 
* Wrote some code based on our ideas to detect bloat 
** The code takes a tree in string form and then converts it to a graph 
** We then iterate through the graph to find all of the leaves in the graph (https://github.gatech.edu/jminowa3/emade/blob/bloatRemove/src/GPFramework/removeBloat.py) 

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Meet with Jeffrey to work on bloat metrics, same to-do as last week  
| Met and have started to write code based on dummy data 
|9/27/2019
|10/4/2019
| 
|-
|}


== October 9, 2019 ==
* Wrote some code to iterate through a tree string to find bloat 
* The code takes in a valid tree string and converts it to a graph using the deap library. The graph returns a list of edges, nodes, and a dictionary mapping (because the edges/nodes are enumerations and not actual node names) 
* The edge list is returned as a list of tuples that are formatted as (parent, child) -- parent / child relationship in a tree, not in evolution
* My idea is that if a parent = child, there's bloat. Add this tuple to a list of bloat nodes 

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Figure out what to do once bloat is detected (rebuild the tree?) 
| Turns out this idea of detecting bloat was wrong - scratch the idea 
| 10/9/2019
| n/a
| n/a
|-
|-
| Make slides for midterm presentation 
| Done
| 10/18/2019
| 10/21/2019
| 10/20/2019
|-
|}

== October 18, 2019 ==
* Met with Jeffrey to make our slides for the  midterm presentation / figured out what each of us are going to talk about during the presentation

== October 21, 2019 ==
* Had midterm presentations in class

== October 28 - November 3, 2019 ==
* For now, unsure of how to query the database so we're using mock data (code example below) 
* Wrote some code to parse through a string to retrieve its method name and data input 
* Wrote some code to find bloat in individuals - unsure of how to remove bloat right now 

    def get_mcm_val(self): # return dummy data 
        # mcm_cache = {}
        mcm_cache = {
            "Round__0_0": "ab",
            "MinLoc__2_3": "ab"
        }
        map_name_to_cache = {
            "Round": ["Round__0_0"],
            "MinLoc": ["MinLoc__2_3"]
        }
        return mcm_cache, map_name_to_cache

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Add MySQL functionality to code 
|Done
|11/3/19
| 12/1/19
|11/26/19
|-
|}

== November 4 - November 10, 2019 ==
* Met with Dr. Zutty to discuss ways to remove bloat once it's found 
* Going to work on removing bloat by modifying deap's mutShrink function 
** deap's mutShrink function randomly removes nodes, so we are going to rewrite the code so that it removes specific nodes

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Modify mutShrink to have it remove bloat nodes 
|Done
|11/8/19
| 11/15/19
|11/15/19
|-
|}

== November 11 - November 17, 2019 ==
* Worked on implementing bloat removal by modifying deap's mutShrink function 
* Since mutShrink chooses nodes to remove randomly, we have to modify the code. Since we're currently able to identify bloat in individuals, we can differentiate between parent and child nodes by using the preorder traversal numbering of the tree we are iterating through
** Originally thought that the parent node had to be removed when bloat is detected, but the child node is actually what needs to be removed
* Right now, converting an individual to a tree isn't working 

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Do peer evals when they're released (11/21)
|Done
|11/15/19
| 12/4/19
|11/21/19
|-
|}

== November 18 - November 24, 2019 ==
* Met with Animesh since we are working on similar things - caught him up on how we are using the caching table to find bloat in individuals
* Add database connection and work on fixing removal code

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Work on slides for final presentation
|Done
|11/24/19
| 12/1/19
|11/30/19
|-
|}

== November 25 - December 1, 2019 ==
* Worked on adding MySQL functionality in the code -- don't have to use mock data anymore
* Bloat removal works now!
** Bloat removal can remove values when given a proper PrimitiveTree. Could not evaluate because the string taken from mysql was created in a way that it can be parsed using from_string method from deap library.
* https://github.gatech.edu/jminowa3/emade/commit/3a5bcee67a7b4fbc30b5d9bb1755239a847b9074#diff-89c832824c72f7a74bf9002bcc9a8d70