== Team Member ==
Team Member: Chidozie Onyeze

Email: chidozieonyeze@gatech.edu

Interests: Machine Learning, Mathematics

== April 20, 2020 ==
[[files/Auc slide.png|thumb|499x499px|AUC Slide]]

=== '''Team Meeting Notes''' ===
* Our team working to clean up our presentation
* We had a practice run of our presentation
** Got feedback from Prof. Zutty
** Added context to the plots
*** Improve labeling
*** Describe the overall takeaway of analysis more

Presentation: https://docs.google.com/presentation/d/1pM_VSVOVw0l5aHGx5YjvkpRcBvNPixVkjcpAnIzLzPk/edit#slide=id.g745abc3516_1_18

=== '''Final Presentations''' ===
* Went through the presentation for all the team
* Made change recommended by Prof. Zutty
* Interesting presentation from all the team
** Very interesting work from NLP and EZCGP teams
*** I have a background in deep learning so it was interesting to me
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Create slide for final project
|Complete
|April 12, 2020
|April 15, 2020
|April 15, 2020
|-
|Practice Presenting slide
|Complete
|April 17, 2020
|April 19, 2020
|April 19, 2020
|}

== April 13, 2020 ==
[[files/AUC vs ADF plot.png|thumb|502x502px|AUC vs ADF Frequency plot]]

=== '''Team Meeting Notes''' ===
* Short update on the progress of other subteams
**Differential fitness has began making runs
**Primitive Analysis began making data plots

=== '''Subteam Meeting Notes''' ===
* We began running tests on Aaron's computer of EMADE with our new method
* Discussed what we wanted to put on our presentation
** ADF count of data
** AUC of data
** Look at  how ADF freq. affects AUC
* I asked to create analysis for how ADF freq. affects AUC
* Created code to parse data and make plot
** Data parsed from sql dumps by Raurai
* Created slide in final presentation
* Noticed that there seems to be little relationship between ADF count and AUC.
** Likely because ADFs are not necessarily 'good'
** Correlation Coefficient of -0.2
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Create AUC/ADF Plots
|Complete
|April 11, 2020
|April 15, 2020
|April 15, 2020
|-
|Create code to parse data
|Complete
|April 11, 2020
|April 15, 2020
|April 15, 2020
|-
|Create slide for final project
|Complete
|April 12, 2020
|April 15, 2020
|April 15, 2020
|-
|Look through Literature
|Complete
|April 3, 2020
|April 15, 2020
|April 13, 2020
|}
[[files/Analysis code 2.png|thumb|332x332px|Code for parsing data and making plot]]

== April 6, 2020 ==
[[files/Tourn algo.png|thumb|579x579px|Code for new Tournament Algorithm]]

=== '''Team Meeting Notes''' ===
* Short update on the progress of other subteams
**Working in Differential fitness has began

=== '''Subteam Meeting Notes''' ===
* We cleared up some confusion about what our goal was
** We were initially under the impression that we were developing a new method to select ADFs but we were actually going to develop a new parent selection method for the GP algorithm that favors trees with more ADFs 
** Discussed ideas for how to make this new method
*** Decided on a method that :
**** Picks dominant individual if one exist  
**** Else picks individual with higher crowding distance and number of adfs if one exists  
**** Else picks randomly  
***   Also looked at methods that only looked at dominance and adf count
**   Discussed implementation details
**   Decided to try implementing method for myself and run local run on my own
**   Discussed about parsing sql dumps
**   I also made a new mutation method:[[files/New mutation code.png|thumb|Code for new mutation method]]
***   Has some prob of picking an adf > .5 (can be tuned)
***   May prove useful in future to boast/control ADF count
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Code new tournament method an add it to emade
|Complete
|April 6, 2020
|April 10, 2020
|April 9, 2020
|-
|Run local runs to test algorithm
|Complete
|April 6, 2020
|April 11, 2020
|April 11, 2020
|-
|Look through Literature
|Complete
|April 3, 2020
|April 15, 2020
|April 13, 2020
|}

== March 30, 2020 ==
[[files/Adf selection code.png|thumb|546x546px|ADF Selection Code]]

=== '''Team Meeting Notes''' ===
* Complete the presentation from previous class period
* Went into depth of what each subteam does
* Make a plan and set goal for the rest of the semester
* Team members made subteam preferences
** Joined Selection Methods subteam

=== '''Subteam Meeting Notes''' ===
* Discusses current code base
* Discussed code location
* Discussed work flow
** Edit code
** Make unit test
** Attempt run on local computer
** Have Aaron run on his computer for main test
* Made plan of action for the semester
** Implement Selection based on size of tree and fitness
** Look through literature for other possible selection methods
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Get EMADE running on new Computer
|Complete
|March 23, 2020
|March 30, 2020
|March 29, 2020
|-
|Run Seeded Run
|In progress
|March 30, 2020
|April 1, 2020
|April 5, 2020
|-
|Look through Literature
|In progress
|April 3, 2020
|April 15, 2020
|April 13, 2020
|}

== March 23, 2020 ==

=== '''Team Meeting Notes''' ===
* Joined ADFs team
* Discussed what team does
**[[files/Seeding picture.png|thumb|526x526px|Seeded runs]]Creates and analyzing Automatically Defined Functions (ADFs)
** Test different techniques for ADF generation
** Test different criteria for evaluating ADF
* Receive an introductory presentation of ADF
** Use different for of EMADE
** Run seeded runs of EMADE
** Different projects in Team
*** Selection Method
*** Differential Fitness
*** Primitive analysis
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Install EMADE on new Computer 
|Complete
|March 23, 2020
|March 30, 2020
|March 27, 2020
|-
|Install MySQL on new Computer
|Complete
|March 23, 2020
|March 30, 2020
|March 27, 2020
|-
|Get EMADE running on new Computer
|Complete
|March 23, 2020
|March 30, 2020
|March 30, 2020
|-
|Run Seeded Run
|In progress
|March 25, 2020
|April 1, 2020
|
|}

== March 9, 2020 ==

=== '''Team Meeting Notes''' ===
* Presented the Final Project
* Feedback:
** Be careful about the scale of the result of EMADE - (Use FP Rate and FN Rate)
** Run more generations to see better results
** Notice the 3rd optimization parameter - Tree Size
* Other groups Presented:
** ADFs
*** Creating a mechnism to automatically add new primatives
** NLP
*** Deep learning using EMADE
** ECzGP
** Design Fundamental 
*** Developing technique to manage bloat 
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Submit Team Preferences 
|Complete
|March 10, 2020
|March 18, 2020
|March 18, 2020
|}

== March 4, 2020 ==

=== '''Team Meeting Notes''' ===
* Met with group to discuss the EMADE presentation
* Troubleshooted problems with installing EMADE and MySQL
* Our team analysed the initial data we were getting from EMADE
** I created the code to draw Pareto Front
** Pareto set contained non-Pareto individuals
** Cause by extra optimization parameter (tree size)
* Created presentation and divided the work
* I worked on the results section
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Install EMADE 
|Complete
|Feb 26, 2020
|March 4, 2020
|March 6, 2020
|-
|Install MySQL
|Complete
|Feb 26, 2020
|March 4, 2020
|March 6, 2020
|-
|Run EMADE Generations
|Complete
|March 2, 2020
|March 7, 2020
|March 7, 2020
|-
|Plot Pareto Optimal Set
|Complete
|March 3, 2020
|March 8, 2020
|March 8, 2020
|-
|Write conclusion for presentation
|Complete
|March 4, 2020
|March 8, 2020
|March 7, 2020
|}

== Feb 26, 2020 ==

=== '''Team Meeting Notes''' ===
After my previous hiatus due to medical issues, I spent most of the week try to catch up the work my team has been doing
* I received updates on our previous team presentation and got feed back on the work we did from the other team members
* I was briefed on what was the next stage if the project - EMADE
* I begun attempting to set up EMADE and MySQL
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Install EMADE 
|Complete
|Feb 26, 2020
|March 4, 2020
|March 6, 2020
|-
|Install MySQL
|Complete
|Feb 26, 2020
|March 4, 2020
|March 6, 2020
|}

== Feb 5, 2020 ==

=== Team Meeting Notes ===
[[files/Titanic pset.png|thumb|Pset Definition]]
Titanic Machine Learning Problem using GP
* We discussed how to clean data further for GP and decided that the techniques used to clean data initially would be fine with GP
* Split up the work for GP presentation - I was in charge of writing the code to run the evolutionary algorithm
* We began by writing all but the evolutionary algorithm and using one of DEAP's inbuilt evolutionary algorithm as a proof of concept
* Design Choices:
** Performed min-max normalization on the input to put them between 0 and 1. This was to avoid any one parameter overpowering all the others initially in the GP process[[files/Code for evaluation Group 5.png|thumb|Evaluation Code]]
** Loss Function: 
*** Clipped value and rounded. ie res < .5 ---> 0 and res >= .0 ---> 1
*** False Positive Rate and False Negative Rate
** Pset:
*** Arithmetic - Add, Subtract, Multiply, Negative
*** Sigmoid, Cos, Sin, Arctan
** Selection Strategy: NSGA-2
** Mate Strategy: cxOnePoint
** Mutation Strategy: genHalfAndHalf
*** Gave us a combination of full and not full tree to increase population variety
* Initially, we faced some challenges involving confusion as to what the results of the  DEAP's inbuilt evolutionary algorithm meant
** It seemed as though the algorithm's best individual had a score of (0,1) which did not make sense [[files/Pareto frontier.png|thumb|Pareto Frontier for the GP Algorithm]]
** Realized that the 'best' individual returned was only the leftmost Pareto optimal individual.
* Results:
** Ran Custom Build Algorithm with a population size of 500 for 200 generations
** Individual of minimal euclidean distance had a score of   (0.2737430167597765, 0.18907563025210083) [[files/Chido - Git Commits Week 6 Group 5.png|thumb|Git Commits for the week]]when tested of the Test Data
**   Area Under Curve: 0.21466128350781655
** Documented the work on the slide
** Created the results section on the slideshow
** Rewrote the conclusions on the slide
* Link to code: https://github.gatech.edu/aliu327/Titanic-Project-Group-4
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Decide on the Pset to use and the evol. algorithm parameters 
|Complete
|Feb 8, 2020
|Feb 11, 2020
|Feb 8, 2020
|-
|Complete Evolutionary Algorithm
|Complete
|Feb 9, 2020
|Jan 11, 2020
|Jan 10, 2020
|-
|Write code to display a plot of points and get AOC
|Complete
|Feb 10, 2020
|Feb 11, 2020
|Feb 11, 2020
|-
|Write Results and Conclusion sections of slideshow presentation
|Complete
|Feb 10, 2020
|Feb 11, 2020
|Feb 11, 2020
|}

== Jan 29, 2020 ==

=== '''Team Meeting Notes''' ===
Titanic Machine Learning Introduction
* A brief introduction to Kaggle and the Titanic Problem
* Clean Data:
** Remove nans
** Remove data that seems irrelevant
** Change ID to make more relevant
** Analyze the distribution and spread of data with respect to various features
** Split into test and train data
* Test various model on the data
* Determine the accuracy of models
* Create Team for Titanic Project:
** Team Members - Alex, Tri, Cameron, Lilly, Rohit 

==== Group meeting notes ====
* We clean the data[[files/Pareto optimal.png|thumb|Pareto Frontier]]
** Removed ['Name','Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']
** Filled nans with Mode for discrete data and mean for continuous data
* Best performing model was the Neural Network (wrt Accuracy)
* Bagging classifier was the 2nd best

=== Action Items ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Setup Group Meeting
|Complete
|Jan 29, 2020
|Jan 29, 2020
|Jan 29, 2020
|-
|Clean Data (Group)
|Complete
|Feb 1, 2020
|Feb 2, 2020
|Feb 2, 2020
|-
|Investigate principal components of data to visualize it (Individual)
|Complete
|Feb 2, 2020
|Feb 2, 2020
|Feb 2, 2020
|-
|Create Bagging Classifier (Individual)
|Complete
|Feb 2, 2020
|Feb 2, 2020
|Feb 2, 2020
|-
|Create code to graph Pareto Frontier (Individual)
|Complete
|Feb 2, 2020
|Feb 5, 2020
|Feb 5, 2020
|}

== Jan 22, 2020 ==

=== '''Team Meeting Notes''' ===
Multi-objective Genetic Programming
* We can create a list of fitness score and try and optimize all the scores in possibly different ways
** We could attempt to maximize or minimize each fitness score independently of the others
** Minimize - Smaller score better
** Maximize - Bigger score better
* Individuals are evaluated using an objective function such that mean square error or cost
* Objective scores make up an individuals phenotype.
* Pareto Optimal
** An individual is Pareto optimal if no other individual in the population outperforms it on all objectives.
** The set of all Pareto individual is called the Pareto Frontier
* Alternative Strategies to maximize the number of Pareto Optimal individuals:
** Non-dominated Sorting Genetic Algorithm II
** Strength Pareto Evolutionary Algorithm 2

=== DEAP Lab 2 Report ===
* The remainder of the lab had me work the multi-objective problem
* Goal of creating the representing the function -x + sin(x^2) + tan(x^3) + cos(x) while minimizing the number of operations used
* The idea of Pareto optimality was introduced
* We demonstrated how to graph the Pareto Frontier of the population of individuals
* AUC was computed
* I attempted to restructure the problem to reduce AUC
* Noticed that the more specific you make the elements of pset, the worse the results tend to be

=== Action Items ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Complete Deap Lab 2 Part 2
|Complete
|Jan 22, 2020
|Jan 29, 2020
|Jan 30, 2020
|}

== Jan 15, 2020 ==

=== '''Team Meeting Notes''' ===
Genetic Programming
* Using the genetic algorithm to approximate a target program via a prescription of what the program should do
* Individual is a program made up of the combination of primitive functions.
* Function are represented as trees
* Data is stored via pre-order traversal
* Mating: 
** We pick a point on both trees and swap them
* Mutation:
** Delete a sub-tree (Deletion)
** Add a new sub-tree (Insertion) 
** Edit/Change a new sub-tree
* Evaluation
** Evaluated on a sample set and the mean square error is the score
** We want to minimize the score 

=== DEAP Lab 2 Report ===
* The lab had me go through a Genetic Programming Problem
* The goal was to find a way of representing the function x^4 + x^3 + x^2 + x through genetic programming
* There were many more parameter to control than in the previous lab
** These include Mutation tactic and pset functions
* When adding function to the pset it is important to ensure that you create safe version of the input that will not error from any possible input
** Added safeSquare and safeSquareRoot
* During the lab, the algorithm was able to find the true solution
** This took 19 generations

=== Action Items ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Complete Deap Lab 2 Part 1
|Complete
|Jan 15, 2020
|Jan 24, 2020
|Jan 23, 2020
|}

== Jan 8, 2020 ==

=== Team Meeting Notes ===
Genetic Algorithm
* Iterative approach
* Improvement of sample population over time
* Samples survive or die depending on their fitness
Selection Methods
* Fitness proportionate  
* Tournament
Mating and Mutation
* Method for generating new sample from combinations of previous samples
* Mutation - random change in the child
* Mating - Splitting 2 parents and joining parts to make child

=== DEAP Lab 1 Report ===
* The lab had me walk through the process of setting up the genetic algorithm framework for the purpose of solving a relatively simple problem.
* Through the lab, I learned the basic syntax of the DEAP framework such as how to set up the toolbox and how to customize the parameter of the GP problem
* '''N-Queens:'''
** My main take away from this exercise was an understanding of how to shape problems in such a way that they can be tackled via the GP algorithm.  
** Creating a custom mutation method and observing the results showed that it is important to provide the system with a decent likelihood to mutate as otherwise you end up with a situation where almost all the individual in the population are roughly the same.

=== Action Items ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Install Deap Package
|Complete
|Jan 8, 2020
|Jan 14, 2020
|Jan 8, 2020
|-
|Complete Deap Lab 1
|Complete
|Jan 8, 2020
|Jan 14, 2020
|Jan 13, 2020
|-
|Join VIP Slack
|Complete
|Jan 8, 2020
|Jan 14, 2020
|Jan 14, 2020
|}