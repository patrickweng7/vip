= General Information =

'''Team Member''': Eashan Sinha

'''Email''': esinha6@gatech.edu

'''Cell Phone''': (404) 637-7910

'''Interests''': Artificial Intelligence/Machine Learning, Data Science, Basketball, Trying new Foods, Percussion

= Fall 2021 (Bootcamp) =

== Week 1 (8/23 - 8/27) ==

=== Lecture Notes (8/25) ===
'''Genetic Algorithm'''

At any given time, there are multiple solutions to a problem
* '''Individual''' is a specific candidate in the population
* '''Population''' is a group of individuals
* '''Objective''' is a way to characterize individuals I'm trying to maximize or minimize
* '''Fitness''' is relative comparison to other individuals
* '''Evaluation''' spits out the DNA (computes the objective of the individual)
* '''Selection''' = 'survival of the fittest'
** fitness proportionate = greater fitness = greater probability of being selected for mating
** tournament = I can pick any number of individuals and whoever has the higher fitness moves to the next round and winners are selected for mating
** You're not directly tied to your fitness but your fitness will still affect the probability of you being selected
** But you can combine the two above (which is how it's set up in emade)
* '''Mate/Crossover''' is when we take two individuals (or more) and exchange DNA between them (mating)
* '''Mutation''' is when we make a small change to an individual -- purpose is to maintain diversity
** We make small changes to a child (after mating)

'''Algorithm'''

# Randomly initialize a population
# Evaluate the population to get the objective (determine fitness)
# Repeatâ€¦
#* Select parents
#* Crossover on parents creating population
#* Mutation of population
#* Determine fitness of population
:: ... until best individual is good enough

=== Lab 1 - Genetic Algorithms with DEAP ===

==== ''Lab Setup'' ====
* Saved 'Lab 1 - Genetic Algorithms with DEAP' as .ipynb file (''Lab 1 - Genetic Algorithms with DEAP.ipynb'')
* Downloaded and installed Anaconda for MacOS
* Launched '''JupyterLab''' using Anaconda Navigator
* Imported Lab .ipynb file into JupyterLab
* Opened a new Terminal window and installed '''deap''' using <code>$ pip install deap</code>

==== ''Lab Notes'' ====
'''OneMax Problem'''
* Simple genetic algorithm problem-- '''Objective''': find a bit string containing all 1s with a set length
* Using DEAP Python Library to solve
* '''Deap Overview''': https://deap.readthedocs.io/en/master/overview.html
* we use DEAP's Toolbox to define functions available to our GA
** Attribute Generator: "attr_bool"
*** Randomly generates a boolean represented by either 0 or 1
** Structure Initializer: "individual"
*** Generates an individual and initializes each with a list of 100 booleans --> bit string length of 100
** Structure Initializer: "population"
*** Defines population-- list of individuals
* Defined evaluation function for fitness objective
** Returns sum of Boolean integers of an individual; more 1s = higher fitness score (max score = 100)
** Sum is returned as a tuple to match previously defined fitness objective
* Defined algorithm's genetic operators
** '''Four Functions''':
*** "evaluate": evaluation function previously defined
*** "mate": two-point crossover function
*** "mutate": flipping a bit w/ independent probability of flipping each bit = 0.05
*** "select": tournament selection of 3 individuals
* Defined <code>main</code> '''genetic algorithm'''
** Started off by initializing population (n) to 300
** Evaluated population by mapping evaluation function to population. Then we assigned each individual their respective fitness value.
* '''Evolution'''
** Began Evolutionary Process
*** Created evolutionary loop to set algorithm to run for 40 generations
** Added '''selection''': used tournament selection on population and made a list of an exact copy of the selected individuals --> ensures offspring are a separate instance
** Performed '''crossover''' and '''mutation''' in the offspring
*** Mate two individuals w/ 50% probability and mutate an individual with 20% probability. <code>delete</code> statements invalidate the fitness of mated/mutated offspring
** Re-evaluate modified offspring & Replace old pop. with offspring
** Define and print stats for population
*** Gathered all fitnesses in one list and print stats

[[files/OneMaxProblemOutput.png|550x550px]]

*


=== Action Items ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Add Meeting Lecture Notes into Notebook
|Completed
|August 25, 2021
|September 1, 2021
|August 30, 2019
|-
|Join Team Slack
|Completed
|August 25, 2021
|September 1, 2021
|August 25, 2021
|-
|Complete "Lab 1 - Genetic Algorithms with DEAP" in JupyterLab
|In Progress
|August 25, 2021
|September 1, 2021
|
|}

== Week 2 (8/30 - 9/3) ==

=== Lecture Notes (9/1) ===
'''Genetic Programming'''

* Last week, we focused on Genetic Algorithms and how we want to arrive at a evolved population-based solution
* Instead of utilizing a function '''evaluator''' on an individual to obtain objective scores, we want to run the [input] data through the individual and use the individual as the function itself
** Then we want the evaluator to be run on the Output Data
* We represent our program as a '''Tree Structure'''

