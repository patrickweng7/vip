== Elan Grossman ==

Team Member: Elan Grossman

Email: egrossman3@gatech.edu
Cell Phone; 770-595-8339

[[files/Elan.jpg|thumb|123x123px]]

Interests: Machine Learning, Robotics, Puzzles, AR/VR



== August 25th, 2021 ==
'''Team Meeting Notes:'''
* Covered Course Syllabus and Individual Responsibilities
* Intro to genetic programming
** Individual = a single subject defined as a set of features
** Population = a collection of individuals
** Objective = Maximization of a goal
** Fitness = Objective score relative to other individual scores
** Selection = Method to determine which experiment to try next through choosing a number of individuals to succeed
*** Emade algorithm uses a combination of tournament and proportionate selection techniques
** Mating = Exchanging features between individuals
** Mutation = Changing features in an individual
* Basic Genetic Programing algorithm is:
** Randomize or seed population
** Determine Objective and Fitness
** Repeat: Selection -> Mating -> Mutation -> Fitness Evaluation
* Used One-Max problem as an example of Genetic programming
* Covered Jupyter notebooks

'''Lab 1 Notes''' 
I began the lab by running each cell in the Jupiter notebook step by step, but started to get lost in the details. The creator method of the DEAP framework in particular is capable of producing multiple types of objects with the same function call. I assume this is to create a directed graph similar to tensorflow or spark. So I went over to the documentation at [[https://deap.readthedocs.io/en/master/]] to read more.

The creator method is a way to create classes on the fly using methods instead of files. In the documentation the example is that
 create("Foo", list, bar=dict, spam=1)
Is equivalent to
 class Foo(list):
    spam = 1
    def __init__(self):
        self.bar = dict()

Therefore,
 creator.create('Individual', list, fitness=creator.FitnessMax)
Is creating a class called "Individual" that inherits a list and contains an attribute that is an instance of the FitnessMax class.
This is better summarized in [[https://deap.readthedocs.io/en/master/tutorials/basic/part1.html#creating-types]]

I was able to run through the rest of the lab with no problems and began to become familiar with the conventions of the DEAP framework and how we can register the various fitness, mutation, and mating functions to our toolbox. One thing of note is to use the copy method from tools when mating and mutating individuals. This is to ensure that we do not modify individuals in the population when creating the offspring.

What struck me as odd was the selection of the offspring. The tournament selection was set to evaluate 3 individuals at a time, but it was also set to create 300 offspring. Our population is also 300. According to the documentation, n individuals are chose k times. In this case n=3 and k=300. This means that there is a good number of duplicate individuals in the population. I also suspected that the number of duplicates would increase over each generation. The populations will converge to all 1s, so the probability of two sets with 99 ones each at different positions generating the same set increases. The counts of duplicates at each generation was as follows:
 [34, 65, 76, 48, 51, 48, 54, 49, 50, 62, 57, 58, 52, 40, 62, 38, 57, 72, 67, 96, 81, 93, 92, 100, 117, 116, 131, 150, 173, 175, 202, 196, 197, 211, 220, 215, 231, 229, 236, 238]. 

Perhaps there needs to be a clean up set to reduce duplicates and increase the search space. The effect of duplicates is that it increases the probability that a solution will be selected during the tournament, and therefore weighs the optimal solution towards these individuals.

'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Work through DEAP tutorial notebooks
|In Progress
|August 25, 2021
|-
|-
|}
