== Team Member ==
[[files/GeorgiaTechBuzz.jpg|thumb|123x123px]]
Team Member: Jeffrey Minowa

Email: jminowa3@gatech.edu<br>
Cell Phone: 678-414-7880

Interests: Visualization

==Week 1: January 7 - January,13 2019 ==
'''Team Meeting Notes:'''
*We split into two sub-teams: User Study, and Coding

*Coding Brainstorming
**Refactoring code and making it extensible
**Improve aesthetics of website
**Change EMADE code so that each individual has references to its parents
**Visualization of the ancestral lineage in phenotypic/objective space (i.e., what was the objective scores of the parents/grandparents that resulted in the current individual)
**Visualization of the ancestral lineage in genotypic/tree structure space (i.e., what parts of an individual came from each of the parents)
**Visualization of the evolutionary processes, (i.e. what mutations, selections, mating are occurring that are positive, and which are detrimental?)
**How many times is an individual selected over time? 
**How productive are their offspring, i.e. are they dominate or co-dominate to the parents or population?
**How many Pareto individuals are there over time?
**Change in Pareto Front over time
**Fix Trees in pareto front graph 
**Sometimes not readable and goes off screen
**Make it so you can click the individuals and the tree visualization persists

'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|
|No progress this week
|January 13, 2019
|January 20, 2019
|January 16, 2019
|}

==Week 2: January 14 – January 20, 2019==
*Dashboard UI: use a dashboard template to easily switch between main screen and updating pareto front
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Created a fixed toolbar for easy access of generation search
|Completed
|January 14, 2019
|January 20, 2019
|January 23, 2019
|}

==Week 3: January 21 – January 27, 2019==
'''Team Meeting Notes:'''
*Got website to run on Heroku
*Created a google form
*Fixed URL errors
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Got e-viz running
|Completed
|January 23, 2019
|January 28, 2019
|January 27, 2019
|}
==Week 4: January 28 – February 3, 2019==
'''Team Meeting Notes:'''
*Viability of Heroku app
**It seems like we are solving a problem that isn’t there
**Heroku app was meant to be simpler
***No simple way to connect local DB
**A lot of code needs to be written to set up uploading a csv
*Having user set up a local env to run EMADE-Viz is actually fairly easy
**With a requirements file, it is very easy to locally set up Flask
'''My Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Fix Dashboard UI with new template and usability
|Completed
|January 28, 2019
|February 4, 2019
|February 3, 2019
|}

==Week 5: February 4 – February 10, 2019==
'''Class Meeting Notes:'''
*Changed EMADE to keep track of individuals’ history
**Called sql_connection_orm.py in src/GPFramework folder
**Look for history decorator object from DEAP
**Add columns to the individuals to keep track of their parents
*2 Visualizations
**Lineage visualization in objective space
***Track the lineage of an individual on a plot of the objective space (i.e. FN/FP for the Titanic Dataset)
**Genotypic visualization
***See where exactly a tree mutated
***What parts did each parent contribute
*Idea for future
**Manual editing of individual tree
**Be able to drag and drop nodes and connections

'''Team Meeting Notes:'''
*Add a column for parents hashes
*Reach out to EEG team for datasets
*Finish the user study materials
*Set up user studies with EEG team and a first-year team
*Create a yml file for requirements and environment setup
*Get EMADE and EMADE-Viz running in parallel
*Get EMADE running on Google Cloud

'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Get Emade running live with flask server
|Completed
|February 6, 2019
|February 11, 2019
|February 10, 2019
|-
|Get Emade to run on GCP
|Completed
|February 6, 2019
|February 11, 2019
|February 10, 2019
|}

==Week 6: February 11 – February 17, 2019==
'''Team Meeting Notes:'''
Items to be fixed: 
*Create graph for total evaluation time per generation
*Get ancestry from Emade
*Run additional dataset not Titanic
*Error handling for login
*Missing column error message
*Redirect from login page to dashboard with update button
*Live update does not work without refresh
*Run EMADE Viz on Google Cloud
*Slider bar for previous generations (once refresh speed is fixed)
*Add pop-up to show additional information about individuals in pareto front visualization when clicked
*Box and whisker plot for evaluation time per individual per generation (box and whisker plot)
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Run additional dataset with Emade besides the Titanic dataset
|Suspended
|February 13, 2019
|February 20, 2019
|
|-
|Add Pop-up functionality to the pareto front trees when glyph is clicked
|Completed
|February 13, 2019
|February 20, 2019
|February 19, 2019
|}

==Week 7: February 18 – February 24, 2019==
'''Team Meeting Notes:'''
Items to be fixed: 
*Keep track of ancestry for individuals
*Run the Google Cloud instance
*Generational slider/player
*Improve documentation for running Google Cloud Instance of Emade
*Work on other version of graphs that only take into account non-error’d individuals 
*Fix cookies bug with updating database 
*Make onClick tree display on the dashboard instead of making new page
[[files/Tree_Pop_up.png|none|thumb|400x400px|Tree pop up]]

'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Fix issues with on-click, making the click display on same screen instead of new page
|Solved
|February 20, 2019
|February 27, 2019
|February 26, 2019
|}

==Week 8: February 25 – March 4, 2019==
'''Team Meeting Notes:'''
Items to be fixed: 
*Debug hierarchy changes
*Run the Google Cloud instance
*Generational slider/player
*Save XML in db
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Run a Google Instance
|Solved
|February 27, 2019
|March 6, 2019
|February 30, 2019
|}

==Week 9: March 5 – March 12, 2019==
'''Team Meeting Notes:'''
Items to be fixed: 
*Create a visualization that shows all individuals that takes into account other objectives
*Finish presentation and merge changes
[[files/Metadata_table.png|none|thumb|400x400px|Meta data from xml input into the database]]
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Put metadata from XML into the database
|Solved
|March 6, 2019
|March 12, 2019
|March 10, 2019
|}

==Week 10-12: March 11 – March 25, 2019==
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Spring Break - no work done
|
|
|
|
|}
==Week 13: March 25 – April 1, 2019==
'''Team Meeting Notes:'''
Items to be fixed: 
*Graph coloring
*Hereditary visualization
*Cache Pickling
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Created generalizability with metadata
|Solved
|March 25, 2019
|April 1, 2019
|March 30, 2019
|}
==Week 14: April 1 – April 8, 2019==
'''Team Meeting Notes:'''
Items to be fixed: 
*Go through and fix information from user study feedback
*Speed up process of sql calls
* Segregating generational from aggregate view
*Change color palette for more robust tree parsing
*UI tooltips
[[files/New_Auc.png|none|thumb|400x400px|Accepts reuse to be on when running emade]]

'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Error checking or empty meta table and fixing AUC when emade is reused
|Solved
|April 1, 2019
|April 8, 2019
|April 6, 2019
|}

==Week 15: April 8 – April 15, 2019==
'''Team Meeting Notes:'''
Items to be fixed: 
*Finish up user study change implementation
*export graph functionality
*XML upload functionality
*Reduce number of times database is called
*Hierarchy visualization
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|XML upload functionality
|In-Progress
|April 8, 2019
|April 15, 2019
|
|}

==Week 15: April 15 – April 22, 2019==
'''Team Meeting Notes:'''
Items to be fixed: 
*Work on presentation
*Finish up xml uploading
*Allow xml to be parsed and loaded into the graphs
*Finish hierarchy visualization
[[files/Xml_upload.png|none|thumb|400x400px|Ability to load the file to the server]]

'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|XML upload functionality
|Solved
|April 15, 2019
|April 22, 2019
|April 21, 2019
|}

==Grade Argument==
I believe I deserve an A because I was able to accomplish everything asked of me. I was able to complete projects that I had no prior knowledge of and was able to get the results needed to move forward with the project.
==Week 1: August 23 –  August 30, 2019==
'''Team Meeting Notes:'''

'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Figuring out meeting time
|}

==Week 2: August 30 – September 6, 2019==
'''Team Meeting Notes:'''
Todos: 
*Getting up to speed on bloating by reading
'''Reading Notes:'''
''Implicitly Controlling Bloat in Genetic Programming''
Peter A. Whigham, Member, IEEE, and Grant Dick, Member, IEEE

*3 main methods for bloat control used today
**Limit number of node complexity
**Fitness that biases smaller trees
**Apply genetic operators to reduce redundant code or bias smaller offspring
*Author's idea is to use spacial structuring
**This spacial structure would limit the migration allowed biased based on the shape of the structure
**Islands caused inbreeding and converging to local maxima early on
*Other methods used
**Removal of parents when children are similar
**Tournaments and double tournaments
**Recombinative hill-climbing
***Copying the original population and randomly pairing, comparing fitness of parent and child
*Quantifying bloat
**Evolution size
**Simpler models
**Empirical examination of bloats to a range of conditions

'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Read Implicitly Controlling Bloat in Genetic Programming
|
|August 30, 2019
|September 6, 2019
|September 5 , 2019
|}

==Week 3: September 6 –  September 13, 2019==
'''Team Meeting Notes:'''
Getting NeatGP to work with DEAP
TODOS:
*Hashing nodes and comparing with nodes downstream
**If the hash of the child is the same as parent, remove parent
**Check for constant output of node
**Use DEAP tree as a base to check if hashing algorithm works
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Create hashing algorithm for DEAP tree
|Suspended
|September 6
|
|
|}
==Week 4: September 13 –  September 20, 2019==
'''Team Meeting Notes:'''
Each node in EMADE passes its cached transformed data set into the next node.
From this, I can access the cached data and see differences in the data. If the data has not changed (cache is the same), then bloat has occurred and the node can be removed.
TODOS:
*Get EMADE running
**Access caching table from EMADE
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|EMADE is successfully running
|Complete
|September 13
|September 20
|September 20
|}

==Week 5: September 20 –  September 27, 2019==
'''Team Meeting Notes:'''
*Each node in EMADE passes its cached transformed data set into the next node.
*From this, I can access the cached data and see differences in the data. If the data has not changed (cache is the same), then bloat has occurred and the node can be removed.
*Comment out in deap/emo.py "if len(individuals) % 4 != 0:" and and do python setup.py deap to redo
*Look at detection processing branch

TODOS:
*Figure out how the cached datasets move from node to node

The caching table is found in the sql database. It uses referential keys to grab individuals based on specific hash of the individual. I was looking at the wrong branch.
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Implement a way to get the caching table
|Solved
|September 20
|September 27
|September 27
|}

==Week 6: September 27 –  October 4, 2019==
'''Team Meeting Notes:'''
Each node passes up cached information from the previous node. It concatenates the current node's name with the hash string. The roots of the nodes can be used using the DEAP library and from there, I can take an individual and remove bloat nodes. Nodes that send up the same cached information, regardless of the number of nodes, will continue to send up that information and are still considered bloat.


TODOS:
*Convert an individual taken from the cache table and remove bloat

NOTES:
*Created a new class that pulls the pset as well as a hardcoded individual to try to create instances
**specific individual was taken because it was found in the caching table 
*Need to make hypothetical individual that contains bloat
*Need to create method that pulls from database to get the cached information\

Code: https://github.gatech.edu/jminowa3/emade/tree/bloatRemove

Blockers:
After fixing the deap code (emo.py), removing the individuals % 4 == 0, the code does not create individuals, so I am unsure if the code compiles because of this.

'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Remove an individual 's bloat from cache table
|Pending
|September 27
|October 4
|
|}

==Week 7: October 4, 2019 –  October 11, 2019==
* Wrote code to imitate getting data from the database
* The code takes in a valid tree string and converts it to a Primitive Tree from deap. The graph returns a list of edges, nodes, and a dictionary mapping (because the edges/nodes are enumerations and not actual node names) 
* The edge list is returned as a list of tuples that are formatted as (parent, child) -- parent / child relationship in a tree, not in evolution
* There contains duplicate input values, then there is likely bloat, so add these values to a list.
* git commit : https://github.gatech.edu/jminowa3/emade/commit/554f6e28e94e6ce0d4eba24ac1539f9b5137bf3c#diff-89c832824c72f7a74bf9002bcc9a8d70

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Figure out what to do once bloat is detected (rebuild the tree?) 
| Turns out this idea of detecting bloat was wrong - scratch the idea 
| 10/9/2019
| n/a
| n/a
|}
==Week 8: October 11, 2019 –  October 18, 2019==
* TODOS: create a presentation for the midterm
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Make slides for midterm presentation
| Done
| 10/18/2019
| n/a
| n/a
|}
==Week 8: October 18, 2019 –  October 25, 2019==
* TODOS: Make dummy data that looks like sql database table and change code to parse data. Created pseudo code to be implement the changes 
* https://github.gatech.edu/jminowa3/emade/commit/5fd48e90fd674a832dfb180712a776ba1d0c460b#diff-89c832824c72f7a74bf9002bcc9a8d70
* Do midterm presentations
==Week 9: October 28, 2019 –  November 3, 2019==
* TODOS: 
* For now, unsure of how to query the database so we're using mock data (code example below)
* Implement the pseudocode
** Wrote code to parse through a string to retrieve its method name and data input
** Wrote code to find bloat in individuals and met with Austin to implement using caching table

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Add MySQL functionality to code 
|Done
|11/3/19
| 12/1/19
|11/26/19
|-
|}

==Week 10: November 3, 2019 –  November 10, 2019==
* TODOS:
* Met with Dr. Zutty to discuss ways to remove bloat once it's found
* Going to work on removing bloat by modifying deap's mutShrink function 
**deap's mutShrink function randomly removes nodes, so we are going to rewrite the code so that it removes specific nodes
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Modify mutShrink to have it remove bloat nodes 
|Done
|11/8/19
| 11/15/19
|11/15/19
|-
|}

==Week 11: November 10, 2019 - November 17, 2019 ==
* Worked on implementing bloat removal by modifying deap's mutShrink function 
* Since mutShrink chooses nodes to remove randomly, we have to modify the code. Since we're currently able to identify bloat in individuals, we can differentiate between parent and child nodes by using the preorder traversal numbering of the tree we are iterating through
** Originally thought that the parent node had to be removed when bloat is detected, but the child node is actually what needs to be removed
* https://github.gatech.edu/jminowa3/emade/commit/4a25c637a5a2b594a291225622bcf84573f266eb#diff-89c832824c72f7a74bf9002bcc9a8d70

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Do peer evals when they're released (11/21)
|Done
|11/15/19
| 12/4/19
|11/21/19
|-
|}
==Week 12: November 17 - November 24, 2019 ==
* Met with Animesh since we are working on similar things - caught him up on how we are using the caching table to find bloat in individuals
* Add database connection and work on fixing removal code
* https://github.gatech.edu/jminowa3/emade/commit/6896dbf257230a477bfdd850d44511601410be89#diff-89c832824c72f7a74bf9002bcc9a8d70

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
| Work on slides for final presentation
|Done
|11/24/19
| 12/1/19
|11/30/19
|-
|}
==Week 13: November 24 - December 1, 2019 ==
* Worked on adding MySQL functionality in the code -- don't have to use mock data anymore
* Bloat removal can remove values when given a proper PrimitiveTree. Could not evaluate because the string taken from mysql was created in a way that it can be parsed using from_string method from deap library.
* https://github.gatech.edu/jminowa3/emade/commit/3a5bcee67a7b4fbc30b5d9bb1755239a847b9074#diff-89c832824c72f7a74bf9002bcc9a8d70