
== Team Member ==
Team Member: Rodd Talebi

Email: rodd.talebi@gatech.edu

Cell Phone; 650-930-0533


Interests: Machine Learning, Rowing

== Notes - Spring 2020 ==

=== Week 16 - Final Week ===

==== Monday - Apr 20th - PRESENTATION ====
[https://docs.google.com/presentation/d/1TV78U_DNYqzz7cwFAqhuXwjJl6Ou8qVV0f8nkKiARjY/edit Link to Presentation]

=== Week 15 ===

==== Monday - Apr 13th ====
Michael showed me his idea for how to do transfer learning in EzCGP...essentially we'll have a standalone block that will pick from a group of primitives which are pretrained models with the last layer (or more) stripped. Super simple since it fits right with the data augmentor pipeline he created. We workshoped it a bit but what he had was basically solid.

==== Thursday - Apr 16th ====
Worked with Michael and Henry to debug the code after they tried to impliment their own problem file with data augmentation + tf primitives added. We got it to a stable point where Henrey (and other students?) can start adding more primitives.

==== Friday - Apr 17th ====
Call with Micahel; he got things evaluating but we are seeing too many evaluations for our expected population size...are we creating more individuals per generation than expected somehow???

==== Saturday - Apr 18th ====
Got the code working on my machine! But with plenty of memory errors (was going to attach the logs but 24MB seemed too much)...I need a fancy gpu. Regardless, got it working on a gpu and pushed the code up so that Michael can distribute for last minute runs perhaps.

Made Transfer Learning slides.
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|New-Redevelopment
|no updates on my end but did debug a lot with Michael. Will need to clean dive after semester is over to make sure that the code added by students is smooth and acts as expected...one alarming thing is that we may be producing more individuals than we originally intended which is very odd.
|Feb 9, 2020
|May 2020
|
|-
|Run Code Locally
|Done but with OOM errors
|Apr 12th, 2020
|
|Apr 18th, 2020
|}

=== Week 14 ===

==== Monday - Apr 6th ====
Tried to come up with a good syntax convention for programming. [https://github.com/ezCGP/ezExperimental/wiki See Wiki.] 

==== Sunday - Apr 12th ====
Did a clean install of Ubuntu 18.04 on my home pc so I can try again to get TF + Cuda  + Nvidia drivers working on my computer. TF provided a docker image which makes life a lot easier but I still had to figure out that I needed the older [https://developer.nvidia.com/cuda-10.1-download-archive-base?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1804&target_type=deblocal 10.1 version of CUDA] instead of the most recent 10.2, and the ```--gpus all``` flag to get it to work; oh and also to make sure I had [https://hub.docker.com/layers/tensorflow/tensorflow/latest-gpu-py3/images/sha256-1010e051dde4a9b62532a80f4a9a619013eafc78491542d5ef5da796cc2697ae?context=explore the right docker tag with gpu]. Running the docker image, I still need to pip install Augmentor every time but later I can work on getting my own version of the image with the ezcgp package requirements added.
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|New-Redevelopment
|Implement the code organization changes to the repo and add the syntax changes
|Feb 9, 2020
|May 2020
|
|-
|Run Code Locally
|Now that I have Ubuntu + TF set up, try to see if I can get code working locally
|Apr 12th, 2020
|May 2020
|
|}
[[files/Data loader.jpg|thumb|219x219px]]
[[files/Dataset class.jpg|thumb|216x216px]]

=== Week 13 ===

==== Monday - Mar 30th ====
After working on the documentation, I got an idea for how the layout of the code should be...should have a folder for all the code for the "individual" and all the code for the "block" levels. I outlined it but the immediate issue was how to import things from files the lived in other folders and with varying heirarchies.

Used this [https://chrisyeh96.github.io/2017/08/08/definitive-guide-python-imports.html link] and a lot of playing around in python to conclude that the best way is to have absolute imports with respect to the root directory of the repo BUT also have the root directory added to the sys.path at each page so that, in debugging and playing with the code, we can directly call or import the script from any location.

==== Friday - Apr 3rd ====
Brainstorm with Michael on how we can update our Dataset classes...there's a lot of unused code as he devloped new/better things and as he took it over from Mai. So we came up with a cleaner solution for the classes...a class to '''store''' the data and a class to '''load''' the data. See images on the right.
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|New-Redevelopment
|More documentation but maybe shift more time in finalizing a new hierarchy for how we're going to store the files of the repo.
|Feb 9, 2020
|May 2020
|
|}

=== Week 12 ===

==== Monday - Mar 23rd ====
First week back after spring break and now everything is online and virtual! Basically went over our call from yesterday with the rest of the group who couldn't make it and met the new students. Did the whole shebang of adding them to the groups and github accounts. This time Sam said he would take the new students and he has a whole set of lectures planned for them which should be really nice so I don't have to do it. But NOTE TO SELF spend the first week of Fall semester to do a deep dive in ezcgp concepts to make sure everyone is on the same page...big problem this year with peoples understandings at different places and others forgetting things, and especially now that I'm not teaching the new students about ezcgp, it could be a problem later.
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|New-Redevelopment
|Waiting on mpi universe group to finish their code. Will need to keep adding better documentation to the code though
|Feb 9, 2020
|May 2020
|
|}

=== Week 11 - Spring Break ===
'''Sunday - Mar 22th'''

Re-Group call with everyone with Michael leading everyone in tasking. Basically I need to try to make the code more useable with documentation and then fill in to make sure other's can work on the code.

=== Week 10 ===

==== Monday - Mar 9th - Midterm Presentations ====
[[files/Scratch notes on dataset.jpg|thumb|263x263px]]

=== Week 9 ===

==== Monday - Mar 2nd ====
I went over the Dataset class Michael presented and how he's integrating in Augmentor + pipeline. Looks clean, just gotta prep my side of the code so we can get that worked in.

==== Wednesday - Mar 4th ====
Got symbolic regression working!!! Now I just have to wait for the MPI group to finish their universe class so we can test the code out with mpi and then start working in more complex blocks on gpus!

==== Saturday - Mar 7th ====
I was in LA but talked with Mai over the phone about the flow diagram she made earlier...I liked it; wasn't perfect but there are a few complexities in the code that I think shouldn't be put in the UML diagram since it distracts from learning the concepts; I expressed that to her.

Also Michael said that the tensorflow graph block is pretty stable...still waiting on mpi universe though.
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|New-Redevelopment
|Symb Regression working on a single cpu! Major development put on hold to wait for the MPI universe class to be finished by the other group...was not given a timeline yet by them though :(
|Feb 9, 2020
|May 2020
|
|}

=== Week 8 ===

==== Monday - Feb 24th ====
After progress in the new set of code, I tried to play around with creating a "symbolic regression problem" file so that we have something to test the code with and just run through the small bugs.
[[files/TF2.jpg|thumb|248x248px]]

==== Saturday - Feb 29th - Hackathon ====
Got a little closer to getting symbolic regression working. most of the bugs are cleared. Just need to change how data is read into it...in symbolic regression we don't have 'training', 'validation', 'testing' datasets so I need to generalize how data is read in while also getting something working for symbolic regression. Also don't want to overdevelop Micahel is working on a generalized "dataset" class.

At the hackathon, Michael gave us all an intro to TF2.0...looks like we won't have to change our code too much afterall...I was afraid that we won't have this strongly typed approach to building a graph. We then spent some time trying to generalize the concepts of building a graph + training + running. I think it was a good excercise for everyone.
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|New-Redevelopment
|Try to get symbolic running as soon as possible to make sure the mechanisms of the code actually work before we get too far in the details
|Feb 9, 2020
|May 2020
|
|}

=== Week 7 ===
[[files/Build factory + problem.jpg|thumb|235x235px]]

==== Monday - Feb 17th ====
Met with Sam + Bojun to workshop how to solve the universe+population+problem issues. The solution we came up with was to only have one universe and population (assumine multiprocessing) structure, that way problem class doesn't have to be flexible enough to create different user-specified classes for unvierse and population. But we'll discuss again with Mai+Trai on Friday to get their thoughts. Hopefully we can cement that idea and move on to get a fully operational product for symbolic regression.

==== Friday - Feb 21st ====
Team Meeting to go over Universe + Population + Problem classes and then how main.py will wrap it all.

Output on right...we worked on a lot of the subtlies about where and how to call things that I couldn't figure out on my own. It was bliss to have them resolved.

==== Saturday - Feb 22nd ====
[[files/Main.py + universe.jpg|thumb|229x229px]]
edited the mate, mutate, eval subclasses so they work at the individual level...maybe monday i can try to make a problem class for symbolic regression and then run that
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|New-Redevelopment
|Code up as much as I can and then write up tasks/issues on zenhub so we can start the process of verifying the changes and adopting the new code
|Feb 9, 2020
|May 2020
|
|}

=== Week 6 ===

==== Monday - Feb 10th ====
Spent the whole day coding up a whole new branch. IM A HACKERRRRRR

https://github.com/ezCGP/ezExperimental

Went to the VIP class and showed Sam my updates to see what he thinks. Our discussion sort of blew up into a larger discussion on how to explain the concepts of EzCGP. It was a good excercise on how to explain the code conceptually and then how to express those concepts in code. Got even more ideas on how to improve the code.

==== Tuesday - Feb 11th ====
Following the discussion from VIP class, made the v03 folder in the new repo to put in my new structural changes. Fit everything into "Definition" groups and classes.

==== Wednesday - Feb 12th ====
completed more of the "Definition" classes: Argument + Operator + ShapeMeta

==== Thursday - Feb 13th ====
Finished out Mutating Class and worked on how to initialize a block and then an individual.

==== Friday - Feb 14th ====
Created a set of basic individuals and performed mutation and whole-block mating to show that my code worked on that scale. no evaluation, and no greater script to do the individual creation etc.

==== Saturday - Feb 16th ====
Updated Trai+Mai with my code to see if that's how they thought about abstract classes. Had a discussion with them about how to go about organizing universe, population, and problem...i found it difficult to figure out what should go where since there was so much overlap.
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|Research Abstract classes
|did a lot of reading on Sunday and took notes here https://github.com/ezCGP/ezExperimental/wiki
|Feb 9, 2020
|
|Feb 10, 2020
|-
|New-Redevelopment
|made a ton of progress. successfully created an individual. just need to work out the kinks for how to get the larger mechanisms of universe and problem working together. Then actually implement the recent changes in mpi_universe etc
|Feb 9, 2020
|May 2020
|
|}

=== Week 5 ===

==== Monday - Feb 3rd ====
OUT ON TRIP

==== Sunday - Feb 9th ====
I got a nice computer science lecture on abstract classes and strongly-typing variables. It was a hefty session but I left with a ton of new ideas.
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|ReDevelopment of the Code
|SUSPENDED to start new-redeveloping efforts
|
|Feb 9, 2020
|
|-
|Research Abstract classes
|did a lot of reading on Sunday and took notes here https://github.com/ezCGP/ezExperimental/wiki
|Feb 9, 2020
|Feb 16, 2020
|
|-
|New-Redevelopment
|new branch!  https://github.com/ezCGP/ezExperimental
|Feb 9, 2020
|May 2020
|
|}

=== Week 4 ===

==== Monday - Jan 27th ====
Got to talk with Michael in-person about some other Augmentation packages he found...I asked him to go through the strengths + weaknesses of each and to pick one so we can move away from research and get into implementation...the focus is to show that we can adopt the code to add methods+attributes to an instance of class object instead of 'evaluating' and passing that to the next block...if we later find that another augmentation packages is better for our uses then we can just plug it in and out...right now just prove that we can do it.
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|Augmentation Research
|Michael picked one package and will move forward with implementation
|Jan 11, 2020
|
|Jan 27, 2020
|-
|ReDevelopment of the Code
|no major updates...still working on how to import select operator methods instead of everything so it doesn't slow the code down
|Jan 20th
|May2020
|
|-
|
|
|
|
|
|}

==== Saturday - Feb 1st ====
OUT ON TRIP but I tried to stay by my computer

=== Week 3 ===

==== Monday - Jan 20th ====
NO SCHOOL

==== Saturday - Jan 25th ====
Worked more on the 'redevelopment' of the code and the documentation on zenhub...
* [https://github.com/ezCGP/ezCGP/issues/35 Universe] issue
* [https://github.com/ezCGP/ezCGP/issues/33 Abstract block] maybe?
* [https://github.com/ezCGP/ezCGP/issues/31 Separate out unique genetic info] 
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|Augmentation Research
|No major updates on my end. Waiting on Michael+group to try an implementation with the code I came up with last week
|Jan 11, 2020
|Feb2020
|
|-
|ReDevelopment of the Code
|Picking back up from last semester...see links above
|Jan 20th
|May2020
|
|-
|
|
|
|
|
|}
[[files/Keras aug1.jpg|thumb|212x212px]]

=== Week 2 ===

==== Monday - Jan 13th ====
Worked with the new students to catch them up with EzCGP since many didn't make it to last Saturday's meeting

==== Saturday - Jan 18th ====
Had to work with Michael virtually but we got through a good white board session. Earlier in the week I looked into the specifics of how Keras Data Augmentation worked...ie how do they had new methods and how does the batching work.

[[files/Keras aug2.jpg|thumb|208x208px]]
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|Augmentation Research
|Looking into the specifics of the Keras example and wrote out pseudo code
|Jan 11, 2020
|Feb2020
|
|-
|
|
|
|
|
|-
|
|
|
|
|
|}

=== Week 1 ===
[[files/Branch org.jpg|thumb|229x229px]]

==== Monday - Jan 6th ====
quick check in with the rest of the group...revisit what we did over break. going to dive deeper into make plans for the semeter this weekend

welcome in the new members: Ford, Tan. Added them to slack + public github + asked jason to add them to the private github. for now they're going to look over the design doc to familiarize themselves with the concepts.

==== Saturday - Jan 11th ====
Discussed as a group how we want to organize ourselves into subgroups and what measurable goals we will have in each. I will be doing a bit of the primitive work while continueing my redevlopment of the code from last semester. The big thing is that we are going to table the subgroup to go and start working on small machine learning problems until we have a more stable code base but everyone agreed that that is something we should work towards if we want to start benchmarking to deliver better metrics of progress.

Also had a discussion on how we want to organize our branches...see image to the right.

Met with Michael Jurado about using external packages for data augmentation. Together we came up with an idea about how we can adopt the current structure of a block's evaluate method to construct a data-augmentation-class object instead of the normal evaluation. This basically gave us enough confidence to move forward with the research. [https://github.com/ezCGP/ezCGP/issues/26 Link to issue] and [https://github.com/ezCGP/ezCGP/issues/27 another]
{| class="wikitable"
!Task
!Status
!Assigned
!Suspend
!Resolve
|-
|Augmentation Block
|just proved that 'it seems possible to implement in our code base"
|Jan 11, 2020
|Feb2020
|
|-
|
|
|
|
|
|-
|
|
|
|
|
|}

== Notes - Fall 2019 ==

=== Task Overview  ===
{| class="wikitable"
!Task
!Current Status
!Date
Assigned
!Date
Resolved
|-
|wiki page for pushing to 2 repos
https://github.gatech.edu/emade/ezCGP/wiki/Git-Settings
|Done
|Aug 26th 2019
|Sept 16th 2019
|-
|check out non-github project management tools
https://github.com/ezCGP/ezCGP/issues/9
|de-prioritized;
we seem to do well with our regular meetings and using Issues 
|Aug 26th 2019
|
|-
|restructure ezCGP organization:
* throw scripts into appropriately named folders
* split operator.py into smaller .py scripts so that they are better organized to serve their respective purpose
* abstract our problems.py; allow users to have their own 'problem' script with their own unique name that can then be read in to main.py as an argument
|solid draft done
https://github.gatech.edu/emade/ezCGP/tree/newLayout

need to implement with a simple symbolic regression problem to flush out errors

then need to come up with a plan to have it adopted permenantly / integrated into current code development
|Aug 26th 2019
|
|-
|introduce new classes that inherit from class block() so that we can have more customization
* class TensorBlock(block) ...now we can have overwrite the evaluate method without messy if self.tensorblock==True statements to trigger a different evaluation
* maybe split TensorBlock() into TensorClassify() TensorRegress()...maybe have those classes inherit from TensorBlock? too much?
|only intro edits added...still needs to flushed out in concept and brainstormed with groupmates
https://github.gatech.edu/emade/ezCGP/blob/TensorClass/blocks.py
|Sept 30th 2019
|
|-
|Get a stable build:
* test on Symbolic Regression
* test on CIFAR
Then get an image to work on GCP
|this task will begin once "restructure ezCGP organization" is done/stable
|TBD
|
|-
|Build a solution to seeding evolution with built individuals
* need a solution to strip down an individual's genome + args into something compact...decided to make something like LISP but also something that can be converted to a string and passed as a value through redis
|Built a solution-very stable.
Done.
|Oct 5th 2019
|
|-
|Design Doc
* [https://docs.google.com/document/d/1X8jGDXHAKkMBgOCYCtgT5v-wSqSLjVhxtZnGqr2hwz4/edit link]
|Pretty good draft...can always be polished
Maybe add more about what I/we want to do next
|Oct 26th 2019
|
|-
|WRITE A PAPER
|crap

I keep saying that i need a stable cgp before I get going

will use randy's benchmarks + datasets
|Nov 18th 2019
|
|}

=== Week 16 - Last Week ===

==== Monday - Dec 2nd ====
Presentation was today - [https://docs.google.com/presentation/d/1jAWlWmQj94DfXsNsuke80kzpa3EUEJJKMgvQ2TTC_zg/edit link to powerpoint]

=== Week 15 - Thanksgiving Week ===

==== Monday - Nov 25th ====
I made the final touches on my CGP genome -> LISP -> CGP genome function for seeding...it's pretty hot. [see slack channel...can't upload]

...

Over this week reading papers...after talking to Jason last week he gave me a few papers to read to help me think about writing...

[http://delivery.acm.org/10.1145/2910000/2908918/p485-olson.pdf?ip=130.207.218.196&id=2908918&acc=OA&key=A79D83B43E50B5B8%2E5E2401E94B5C98E0%2E4D4702B0C3E38B35%2EC8C807B6E55A470E&__acm__=1574189531_8e8d78c111f995471e2472874d5dbd40 One]

[https://arxiv.org/pdf/1601.07925.pdf Two]

[https://www.acm.org/publications/proceedings-template ACM LaTex Template]

Might reach out to Brian, the guy who put out a paper and introduced the list of dictionary idea for cgp...see what he recommends...he's out of academia so it's not competition

=== Week 14 ===

==== Monday - Nov 18th ====
Not a lot of notes but just a lot of debugging with Michael...

==== Saturday - Nov 23rd Hackathon ====
Lot of 1-1 with Michael to track why ezcgp seems to hang on icehammer...it works well on a single computer but we see a dramatic halt on icehammer

==== Sunday - Nov 24th ====
Spent a few hours with Michael again; we put in a lot of print statements; shrunk our nodes + pop size; it might actually be that a single node errored because of some small bug in mating...but we didn't notice the error of the run from friday until today. Going to put in print statements with a smaller population (seeded so we don't get that errored individual) and see if we can get past a single generation and also to get time estimates: how long does an epoch take, how long does a single individual evaluation (All 3 blocks) take...

EDIT: looks like it takes ~3sec for each epoch and a couple minutes for a whole individual...this is what we expected which is great!

=== Week 13 ===

==== Monday - Nov 11th ====
Was in Baton Rouge, LA and missed the meeting

==== Sunday - Nov 17th ====
Everyone was sick so we decided not to meet in person.

I spent some time working on my 'new layout'...nothing major really. Spent a lot of time following the code down to each script and started to remove 'import' statements that were redundant...I didn't realize how much get's transferred over...like I only have to import the primitives at the problem.py level so even though evaulation occurs in a different script it doesn't need the functions there...really most of the imports at problem.py satisfy a run...pretty cool.

=== Week 12 ===

==== Monday - Nov 4th ====
Unfortunately I had to re-give the same speech I gave to the new student from Saturday to the other new students today...Hopefully all this time get's well invested and they will be quick to learn.

Michael had an idea to 'compress' and individual to just it's genome representation and send that over to the nodes for evaluation...I worked with him briefly to make sure he took into account how to re-instate an individual after receiving a genome + score from the node after it finishes evaluation...seems like a really solid idea and I'm hopeful...would also be helpful for my seeding problem.

==== Saturday - Nov 9th ====
Was in Baton Rouge, LA so I wasn't at the team meeting.

Spent several hours editing the Design Doc...a lot of little wording mistakes. Made me realize how important it is to set in-stone a set vocabulary so that our language is consistent...is a genome the whole system ie all the genetic material from all the blocks, if so then what do we call a subset of genetic material from a block as it's still a set of genes but not a genome? This doc also turned into a good spot to list out certain assumptions and limitations built into the code of excgp like how we assume that every primitive can only have a single output even though we allow for multiple arity in inputs.

=== Week 11 ===

==== Monday - Oct 28th ====
New students joined.

Checked in with the group and they all knew what they needed to do: parallelization + block mating. I then took the new students to the white board for the rest of the hour and gave a high level intro to cartesian genetic programming, and then went into the general layout of the code: how a run/universe is built, how an individual's genome is defined by blocks, and how a block can mutate. The idea is to get them comfortable with looking through the code. Their homework was to make sure they have access to both public and private/gatech repos of ezcgp, make a dummy branch and push it up, then go over the code and better familiarize with how a genome is defined.

==== Saturday - Nov 2nd ====
[[files/Img 20191102 190318.jpg|thumb|Organize our primitives into separate python script. Specify which files you want with a list of file names. Turn the string into the imported package]]
[https://docs.google.com/document/d/1X8jGDXHAKkMBgOCYCtgT5v-wSqSLjVhxtZnGqr2hwz4/edit#heading=h.oak1q4g0zgql The Design Doc] was born and Jinghua did an amazing start to it!

I was hoping to spend time going deeper into the code with the new students but only one showed up. So I spent the hour going deep into the code and the evolutionary process...I really liked him; he asked really good 'why' questions.

I also spent some time on my 'newLayout'...one of the challenges I overcame was how we can separate our primitives into multiple files, but then have them all imported in smoothly without much work by the user...also need to take into account the operator dictionary. See the image...

=== Week 10 ===

==== Monday - Oct 21st ====
Presentation day - link to [https://docs.google.com/presentation/d/1N7GMRFuyraEj19g2omaQebRJHewAQ5qppXPgKaIcW7Y/edit powerpoiont]

==== Saturday - Oct 26th ====
I spent an hour reviewing my old notes on mating...[https://github.gatech.edu/emade/ezCGP/blob/master/mate_methods.py here is the code] that isn't being used but that just needs to be massaged to work with new framework.

Basically then gave a 2hour lecture on mating and went into detail on the subtle problems with it...a high level summary is that there are a LOT of small design decisions that have to be made to decide on how we are going to reconstruct the genome of an offspring with active + inactive nodes that will be consistent with the rest of the code base where we want to give the individual the best chance to survive and not just kill off anything that has a slight problem with their genome.

The conclusion was that, in the time we had left, it would make the most sense to focus on mating blocks between individuals rather than subsets of genetic materials of a block. The blocks are designed to be an easy plug out + plug in system. They agreed that this would be the most efficient use of our time to make sure we can have enough time to run a full evolution before the final presentation.

EDIT: Sam made a really good summary of today's discussion:<blockquote>''Summary of today’s meeting:''</blockquote><blockquote>'''''Mating'''''</blockquote><blockquote>''Discussed how there is a “find_active” (or similar) method that gets the list of active genes (aka layers + metadata). Majority of the mating should occur with these. However, a small percentage (e.g. 10%) should be with the inactive nodes just to have genetic diversity with mating.''</blockquote><blockquote>''Possible mating methods:''</blockquote><blockquote>''1) Whole block swapping by type (e.g. training with training), and solve any block output to input shape compatibility issues. This is what we will start off with for this semester, since it is easier. To keep diversity with inactive nodes, we might also spontaneously turn on some inactive nodes (maybe mutate into them?)''</blockquote><blockquote>''2) Partial block swapping, by swapping only parts of a block, most notably layers:''</blockquote><blockquote>''- Introduces a host of primitive shape compatibility issues similar to number 1's block to block (e.g. dense -> conv doesn’t work), which can be solved a number of ways:''</blockquote><blockquote>''2a) Assigning primitives to groups by output shape (e.g. max pooling w/ fractional pooling). Then, in those groups, assign a hierarchical layout of which groups can output to which other groups and simply pick layers in that group or child groups to substitute or add in between incompatible layers''</blockquote><blockquote>''2b) Doing an exhaustive search of preemptive compatibility searching (see the mating.py code Rodd wrote, I don’t fully understand it yet, but the comments are good)''</blockquote><blockquote>''2c) Killing the individual and essentially relying on random chance to return to that individual if it is good (probably not preferred, but it is what we use in mutation (e.g. try catch self.dead), so we could just be consistent for mating).''</blockquote><blockquote>'''''Selection'''''</blockquote><blockquote>''Ultimately, we should keep a baseline number of best individuals for next generation before mating. Therefore, for each generation, a certain percentage would be allocated from each process:''</blockquote><blockquote>''Just for example, say 33% of previous pareto optimal individuals, 33% of mutated, 33% of mated children''</blockquote><blockquote>''There are other ways to do selection after mutation/mating, but we should talk about that after mating. Trai and Mai have their own k-select method for post-mutating right now, I believe.''</blockquote><blockquote>'''''Parallelization'''''</blockquote><blockquote>''Michael, Sam, Trai, and Mai are to discuss what to do with large_dataset and if that can be properly deleted to remove I/O bottleneck.''</blockquote><blockquote>''Trai is debugging that today to see if large_dataset is actually holding a lot of memory, or if something else is and can be deleted. Right now, each CPU core already has access to the dataset, so we just need to remove that from the individual skeleton structure and I/O bottleneck should be solved.''</blockquote><blockquote>'''''Design Doc'''''</blockquote><blockquote>''We should make a design document of the high-level and key workflows of the ezCGP process. This could be something Rodd and Sam can work with the new students in creating as a softer onboarding, so they understand ezCGP before diving too deep in the code. This can include extra ideas (like number 2 of mating earlier) that we need to work on next semester.''</blockquote><blockquote>''Topics to avoid: detailed primitive information, complex evaluation and TensorFlow graph structures, etc. Anything that will move the focus away from architecture of ezCGP.''</blockquote><blockquote>''Topic to include: high-level ideas, certain details that aid in explaining certain key decisions (killing broken individuals)''</blockquote>

=== Week 9 ===
<nowiki>*</nowiki>Had our team retreat this weekend*

==== Monday - Oct 14th ====
No Class Today

==== Saturday - Oct 19th ====
Hackathon today

I didn't make the hackathon; as a team we worked on the presentation for Monday.

At this point, we got a run going for 7-8 generations before it reached an error.

Parallelization is still not done but looks like Trai has a good plan so I'm going to let him and Mai go after it; they seem very confident.

I'll keep overseeing the rest of the group to make sure they are not taking any shortcuts in the code to get the multiple blocks stable.

=== Week 8 - Midterm Notebook Due ===

==== Monday - Oct 7th ====
Trai updated us on his results: RAM usage vs number of processes for 64(?) individuals. The RAM usage has been too high; blame put on the fact that each individual carries with them the dataset into evaluation process instead of the data accessed by each process directly. Trai came up with a few solutions; I shared my experience with Redis but in the context of distributed clusters/computing and he said that mpi can do something similar but that will have to come later perhaps.

=== Week 7 ===

==== Monday - Sept 30th ====
Michael brought up how any primitive who's purpose is to create more data (image rotation), must also create more 'labels' for the data so that has to be past in and manipulated...motivation to adopt a 'data pair' class so that labels + data are always passed together or have a 'clean-hack' that we can permanently adopt. Obviously we want to data pair in the end of the day but for now we'll have to do a hack.

My final recommendation was to have a designated block that handles any method that increases our dataset; we can make a new block class and change the evaluate method to pass through 'labels' array with the training data.

On that note, started a repo (TensorClass) introducing new block classes...this way we can add customization without having a bunch of 'flags' in our code that trigger different if/elif/else statements to trigger different behavior. We can bring that customization to the block level and just overwrite inherited methods to work with our needs. Pretty slick imo.

==== Saturday - Oct 5th ====
Was tasked to (prioritized) to come up with a method for compressing an indiviudual's genome (list of dictionaries) and args (referenced by the node dictionaries), into something similar to a LISP...hopefully that is easy for a user to construct, it hopefully will have a similar look to emade's seeding, and can be converted to a string to be passed through redis as a value.

Current structure, goes through each active node, converts the dictionary of inputs + args into a list of [function, input_node_positions, args], then the input_node_positions are substituted with the respective node's list until we have a giant LISP. Then reverse the process to build back out an individual. Still need to work on the 'reverse-back out' part and then work on building a complete individual from a LISP seed.

=== Week 6 ===

==== Monday - Sept 23rd ====
majority of the conversation revolved around why our RAM is remaining super high as we go through new generations...at the end of evaluation we are removing graphs from individuals (self.graph=None) so it doesn't stay attached to the individual when it goes back to the population but the graph is still stored and retained in memory. We're going to try and find new garbage collection methods but for now we're going to try and adopt this process -> (del self.graph; self.graph=None)

==== Saturday - Sept 28th ====
still working in newLayout repo

add utils folder to problems folder...one for skeleton class for blocks, another for reading in data

create an operators folder with an __init__ file that imports in other operator files so we can split them up: simple numpy methods for symbolic regression (add, multiply, etc), tensorflow primitives, cv2 primitives, etc. Will have to combine operator dicts from each file (https://thispointer.com/how-to-merge-two-or-more-dictionaries-in-python/) 

maybe another folder for logging script and log files...Micahel working on this

Then just try and throw in some of the most up-to-date code for the 'evolutionary scripts'; try to get symb regression running. Then on Sunday, compare any changes to what is at the home desktop from over the summer.

=== Week 5 ===

==== Monday - Sept 16th ====
we went over ideas for paralleling the evolution: mutate population in parallel + evaluate in parallel. They explained to me how multi-threading isn't really true multi-threading in python and how it's better to go multi-processing. Even further their idea is to break the population into n-subpopulations to go in n processes. Trai knows his stuff! Lot's to learn from these guys.

I finished a wiki page as a resource for how to push to 2 separate accounts (public github vs private gatech github)...see Task Table

I started working on re-organizing our layout so that work is organized into folders so it's standardized across all developers

=== Week 4 ===
absent all week...CHHIINNNNAAAA

=== Week 3 ===

==== Monday - Sept 2nd ====
no class

==== Friday - Sept 6th ====
started brainstorming how to restructure problems.py and the skeleton_dict into a class object or into an xml doc...leaning away from the later because we don't want too many floating xml files if problems.py was supposed to be the only place where the user is to customize the evolution.

The overarching goal is simplicity...how much can we abstract out so that it is adaptable in the future...class structure vs xml...

See Repo newLayout (link at Task Table)

=== Week 2 ===

==== Monday - Aug 26th ====
At class the other group members caught me up on what was discussed the first week

(re)Introduced CGP to the new students to the group using powerpoint from last semester.

==== Friday - Aug 29th ====
Caught up with work from last semester.

Outlined our sequence of work for the coming weeks:
* Try to get a preprocessing primitives for CIFAR
* make sure we can get 2 block system to work
* work on parallelization -> local multi-processing and then eventually get it on cloud 

=== Week 1 ===

==== Monday - Aug 19th ====
Was not enrolled until Friday of this first week (and I was absent on Monday anyways Tel Aviv -> Moscow -> NYC -> Atlanta ...sucked)