==   Team Member ==
[[files/GeorgiaTechBuzz.jpg|thumb|123x123px]]
Team Member: Yuhao Chen

Email: ychen3070@gatech.edu
Cell Phone:470-312-1678

Interests: Computer networking, Machine learning, Data compression & Data analysis

== January 7, 2019 ==
'''Team Meeting Notes:'''
* Overview of Genetic Algorithms: Introduction to various concepts used in GA
* Post the schedule for the first-semester student(10 weeks boot camp)
'''Lecture Notes:'''
*  Process
# Randomly initialize the population
# Determine the fitness of the population
# Repeat the following until the best individual completes the task 
## Select parents from population
## Mate individuals to create a new population
## Perform mutation of a population
## Determine the fitness of the population
'''Sub-Team Notes:'''
* no sub-team assigned yet
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Initialize Notebook
|Completed
|January 7, 2019
|January 14, 2019
|January 9, 2019
|-
|Join slack
|Completed 
|January 7, 2019
|January 14, 2019
|January 8, 2019
|-
|Read up on Deap
|Completed
|January 7, 2019
|January 14, 2019
|January 8, 2019
|-
|Finish Lab #1 DEAP on Simple Problem [https://github.gatech.edu/emade/emade/blob/master/notebooks/Lab%201%20-%20Genetic%20Algorithms%20with%20DEAP.ipynb Python Notebook Here]
|Completed
|January 7, 2019
|January 14, 2019
|January 13, 2019
|}

== January 9, 2019 ==
'''Progress made:'''
* Installed and study how to use jupyter notebook and install deap in anaconda interpreter
== January 12, 2019 ==
'''Progress made:'''
* Joined automated algorithm Design in slack
* Completed Lab 1 
==Labs==

'''Lab 1 - Genetic Algorithms with DEAP:'''

*'''One Max Problem:'''
**Overview some of the framework's possibilities and illustrate the potential of evolutionary algorithms in general.
**Define individuals, which will be lists of integer values, and to generate a population using them, setup toolbox with commonly used functions.
** Process:Initialization: initialize randomly -> Evaluation: calculate fitness value -> Selection: use a tournament between several individuals to select a best one among them, then repeat to select a new generation -> Crossover: use a two-point crossover -> Mutation: randomly selected bits are flipped -> Propagation: Back to the evaluation stage and repeating

*'''N Queens Problem:'''
**The N Queen is the problem of placing N chess queens on an N×N chessboard so that no two queens attack each other.
**Defined a function called "permutation" to help create our individuals and population
**Final result depended on the original random state
== Genetic Algorithm Concepts ==
;<span id="Genetic Algorithm">Genetic Algorithm</span>
: A genetic algorithm (GA) is a metaheuristic inspired by the process of natural selection that belongs to the larger class of evolutionary algorithms (EA). Genetic algorithms are commonly used to generate high-quality solutions to optimization and search problems by relying on bio-inspired operators such as mutation, crossover, and selection.
;<span id="Fitness">Mutation</span>
: Mutation is a genetic operator used to maintain genetic diversity from one generation of a population of genetic algorithm chromosomes to the next. It is analogous to biological mutation. Mutation alters one or more gene values in a chromosome from its initial state. In mutation, the solution may change entirely from the previous solution. Hence GA can come to a better solution by using mutation. The mutation occurs during evolution according to a user-definable mutation probability. This probability should be set low. If it is set too high, the search will turn into a primitive random search.
For different genome types, different mutation types are suitable:

* '''Bit string mutation'''
:: The mutation of bit strings ensue through bit flips at random positions.

::Example:
::{|
|1 || 0 || 1 || 0 || 0 || 1 || 0
|-
| || || || || ↓ || || 
|- 
|1 || 0 || 1 || 0 || 1 || 1 || 0
|}

::The probability of a mutation of a bit is <math>\frac{1}{l}</math>, where <math>l</math> is the length of the binary vector. Thus, a mutation rate of <math>1</math> permutation and individual selected for mutation is reached.
;<span id="Selection">Selection</span>
: Also called recombination, is a genetic operator used to combine the genetic information of two parents to generate new offspring. It is one way to stochastically generate new solutions from an existing population, and analogous to the crossover that happens during sexual reproduction in biology. Solutions can also be generated by cloning an existing solution, which is analogous to asexual reproduction. Newly generated solutions are typically mutated before being added to the population.
* '''Single-point crossover'''
A point on both parents' chromosomes is picked randomly, and designated a 'crossover point.' Bits to the right of that point are swapped between the two parent chromosomes. This results in two offspring, each carrying some genetic information from both parents.
* '''Two-point and k-point crossover'''
In the two-point crossover, two crossover points are picked randomly from the parent chromosomes. The bits in between the two points are swapped between the parent organism
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Complete Lab # 2 (Symbolic Regression)
|Completed
|January 14, 2019
|January 28, 2019
|January 27, 2019
|-
|Read thesis up to No.76
|Completed
|January 14, 2019
|January 28, 2019
|January 27, 2019
|}
== January 14, 2019 ==
'''Team Meeting Notes:'''
* '''Sub team presentation'''
* Genome [Gene, Gene, …] -> Eval -> Objective Scores: In genetic algorithms, a '''chromosome''' (also sometimes called a '''genotype''') is a set of parameters which define a proposed solution to the problem that the genetic algorithm is trying to solve. The set of all solutions is known as the ''population.'' The chromosome is often represented as a binary string, although a wide variety of other data structures are also used.
* Leaves (Terminals) at the bottom, with nodes
** 1+(3+4)  [+1*34] 
** (0+1)-2  [-+012]
** travel inorder(left-root-right)

== Symbolic Regression ==
** Symbolic regression is a type of regression analysis that searches the space of mathematical expressions to find the model that best fits a given dataset, both in terms of accuracy and simplicity. No particular model is provided as a starting point to the algorithm.
**  y = sinx = x-x^3/3!+ x^5/5! - x^7/7! ...
**[[files/Trees.png|thumb]]
== January 25, 2019 ==
=== Progress made ===
* read part of thesis
* Completed Lab 2 

==Labs==

'''Lab 2 - GP for regression problem:'''

*'''Symbolic Regression'''
*set up a set contains all primitives we would use, and define individual via tree-structure instead of  parameters, and then put expression into nodes and leaves in the tree
*evaluate all the individual with standard error

== January 28, 2019 ==
* Classification
** Confusion Matrix
{| class="wikitable"
|
!Predicted Positive
!Predicted Negative
|-
!Actual Positive (P)
|True Positive (TP)
|False Negative (FN)
|-
!Actual Negative (N)
|False Positive (FP)
|True Negative (TN)
|}
* '''Pareto Optimality'''
** An individual is ##'''Pareto''' if there is no other individual in the population that outperforms the individual on all objectives
** The set of all Pareto individuals is known as the ##'''Pareto frontier''' for the cost function Φ versus processing time ''tend'' obtained through the process recipe optimization with no dosage. The most critical trade-offs are obtained between 0.7 h and 3h. At lower final times, the TOC elimination of 90% is not achieved. Upper final times do not affect to the reactant consumption, and processing cost tends to 6.98·10-2€ per batch.
**[[files/Pareto_.jpg|center|frameless|297x297px]]

*Nondominated Sorting Genetic Algorithm II (NSGA II)
** The population is separated into nondomination ranks
** Individuals are selected using a binary tournament
** Lower Pareto ranks beat higher Pareto ranks
** Ties on the same front are broken by '''crowding distance'''
** '''##Crowding distance''' is calculated by first sorting the set of solutions in ascending objective function values. The '''crowding distance''' value of a particular solution is the average '''distance''' of its two neighboring solutions.
** {| class="wikitable" !Task !Current Status !Date Assigned !Suspense Date !Date Resolved |- |Complete Multi-objective part of [https://github.gatech.edu/emade/emade/blob/master/notebooks/Lab%202%20-%20Genetic%20Programming%20and%20Multi-Objective%20Optimization.ipynb Lab 2] |Completed |Jan 28, 2019 |Feb 4, 2019 |Feb 3, 2019 |}

== February 4, 2019 ==
'''Team Meeting Notes:'''
* Formed a subteam 
* Created a slack for communication
* Plan on finish the model by February 10th and sharing results to form Pareto front
'''Action Items:'''
{| class="wikitable sortable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Complete Lab 3 Titanic Example
|Completed
|February 4, 2019
|February 11, 2019
|February 11, 2019
|-
| colspan="5" |Join subteam slack
|}
* '''Process for ML(Titanic)'''
*   <code>import re import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns  import warnings warnings.filterwarnings('ignore')  %matplotlib inline</code> [[files/ML1.jpg|center|frame]]
* Draw the proportion of survival[[files/ML2.jpg|center|thumb]]
* The relationship between gender and survival
*   <code>train_data.groupby(['Sex','Survived'])['Survived'].count()</code> [[files/ML3.jpg|center|thumb]]
* Distribution of survival and non-survival at different ages
*[[files/ML6.jpg|center|thumb]]

== February 11, 2019 ==

=== Action items: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Kaggle prediction with GP
|Completed
|Feb 11, 2019
|Feb 18, 2019
|Feb 17, 2019
|-
|Complete [http://www.vip.gatech.edu/peer-evaluations Peer Evaluation]
|Completed
|Feb 15, 2019
|Feb 22, 2019
|Feb 16, 2019
|}

=== Data cleaning ===
Missing values
* Continuous attributes – replace with a median of all samples

* Discrete attributes – replace with the mode / most common of all samples
Discrete to one hot encoding
* Gender

* Departing city
Removed unnecessary attributes
* Name

=== Data augmentation ===
* Cabin number can be split into floor level and room location

* Turn floor level into a continuous variable
Confusion matrix
{| class="wikitable"
|True Positive (TP):525
|False Positive (FP): 38
|-
|False Negative (FN):24
|True Negative (TN):304
|}

== February 18, 2019 ==
'''Team Meeting Notes:'''
* Discuss with each other about EMADE
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Install and run EMADE
|Completed
|February 18, 2019
|February 25, 2019
|February 22, 2019
|}

== February 25, 2019 ==
Dealing with Kaggle problem with EMADE engine, connect with each other to speed up the process. 
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Titanic using Emade
|Completed
|February 25, 2019
|March 11, 2019
|March 3rd,2019
|}
Having problem with installing EMADE

solution:
* Downloaded VS Toolbox(update the old version)

* Upgrade the python version
Learning the command of git from website:https://github.com/joshnh/Git-Commands due to have no base of the terminal commands
[[files/1005.png|thumb]]

== March 4, 2019 ==
* Our group decided to meet on March 6, at 3:30 pm to work on the presentation

* We met with  SCOOP error, Kang went to get solutions

* Emade runs with no problem on local host
'''Action Items:'''
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Get Notebook Ready
|Completed
|March 4, 2019
|March 11, 2019
|March 10, 2019
|-
|Meet with the group to work on presentation
|Will meet on March 6 at 3:30pm
|March 4, 2019
|March 11, 2019
|March 6, 2019
|-
|Get results with Emade
|Completed
|March 4, 2019
|March 11, 2019
|March 10, 2019
|}

== March 11, 2019 ==
'''Action Items:'''[[files/1004.png|thumb]]

{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Fix presentation (Add individuals and labels to chart axis)
|Completed
|March 11, 2019
|Spring Break
|March 12, 2019
|}

https://docs.google.com/presentation/d/1_0pFJ9jPmW7f43jxSMH0T_yPCV3Kx0zAAE0is3Swx8g/edit?usp=sharing
* Ran for 39 generations over two weeks
* Seeded with a random forest individual
* May be better optimized if ran for more generations
* Created the most possible combinations of algorithms/individuals
* Least amount of data cleaning, removed human bias
* Evaluation time increases over generations
* Longest amount of time compared to other models with a limited computational power.
* Individuals in the database: 8570
* Individuals evaluated: 7632
* Individuals with non-null scores: 1200
* Individuals used from last generation: 56
* Area Under Curve: 0.913877551020408

== March 25, 2019 ==
* Joined Deep_learning Group

* learning what is the regression problem

* Meetings are on Thursday, which I could not attend, I have to attend '''''CSE6730''''',  but I asked to be informed of all the updates on slack;
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|Understand the ezCGP framework and methodology
|Completed
|March 25, 2019
|April 1, 2019
|March 27, 2019
|}
[[files/1007.png|center|thumb]]

image source: https://www.semanticscholar.org/paper/RECIPE%3A-A-Grammar-Based-Framework-for-Automatically-S%C3%A1-Pinto/ee3a96949d59a6aaff7c3cb66ddcd3512831d257

== April 1st,2019 ==

=== Team Meeting Notes: ===
* Team A would focus on making the ezCGP framework easier to use and more user friendly and team B would work on extending the framework to solve regression problems as well.
* Mr.Rodd gave examples of  writing code in tensorflow and the general tensorflow framework for building neural nets and how neural network works.
* As asked, I ran the main.py in the files to understand with the selection of mutation methods and basic primitives available to ezCGP.

* I selected team A to join in, talked a lot to Jinghua Zhang, who helped me to understand the framework better.

=== Action Items: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|learning SymbRegression branch
|Completed
|April 1st, 2019
|April 8th, 2019
|April 5th, 2019
|-
|Select a subteam to join
|Completed
|April 1st, 2019
|April 8th, 2019
|April 1st, 2019
|}

== April 8th, 2019 ==
* Animesh Agrawal pushed one solution concerning  the number of epochs run wasn't easily configurable from problem.py file where many of the parameters and configurations for ezCGP are setup . Issue resolved by first adding a parameter n_epochs to the problem.py skeleton block dictionary and integrated this new parameter into the blocks.py file which would run the skeleton block. 
* Did not make the subteam meeting still because of CSE6730 time conflict, but according the discussion on the slack ,the team added another parameter large_dataset to problem.py's skeleton_block dictionary and a function that can be used to read the data contained within each of the files. 
* Talked to Aniruddha to catch up with the process of the subteam, be assigned with work of testing and training the best individual in the ezCGP.

=== Action Items: ===
{| class="wikitable"
!Task
!Current Status
!Date Assigned
!Suspense Date
!Date Resolved
|-
|continue learning SymbRegression branch
|Completed
|April 8th, 2019
|April 15th, 2019
|April 10th, 2019
|-
|Make ezCGP one new feature to handle large datasets 
|Completed
|April 8th, 2019
|April 15th, 2019
|April 10th, 2019
|}

== April 15th, 2019 ==
'''Team Meeting Notes:'''
* Testing and training the best individuals from the ezCGP.
* Learned how about Google Collab as a platform to run python tensorflow models ([https://www.youtube.com/watch?v=inN8seMm7UI '''https://www.youtube.com/watch?v=inN8seMm7UI'''])

* Access to Aniruddha's previous code for reference
'''Personal Work:'''
* I write my own work with my understanding with deep learning framework, build five layers network to deal with the cifar-100 datasets,[https://github.com/cedricchan/cnn_trail/blob/master/CNN.py ('''https://github.com/cedricchan/cnn_trail/blob/master/CNN.py'''])
* fail to meet team leader in person, we talked on slack and he gave me some advice on updating the framework I built by myself
 The network structure of CNN is:
 
 The first layer is: convolution layer (64 convolution kernels) + maximum pooling layer + LRN layer
 
 The second layer is: convolution layer (64 convolution kernels) + LRN layer + maximum pooling layer
 
 The third layer is: fully connected layer (384 hidden units)
 
 The fourth layer is: fully connected layer (192 hidden units)
 
 Fifth layer: softmax layer (output 100 is the vector)
 
 The code for training the data set using CNN is as follows (the number of network layers is too small, and the training result top1 has an accuracy of only 0.2341):
[[files/1008.png|center|thumb]]
[[files/1006.png|thumb|center]]

== April 22nd, 2019 ==
* Final presentation with other team members.
[[files/Cgp.png|thumb]]
* In charge of the part of the presentation "what is ezCGP", explain why we should use ezCGP and the advantages
Self-evaluation: A

Reason: (1)Participate a lot when in the titanic sub-team, lead the talk and scheduled the discussion

(2) Dig into papers to find out approaches to solve or weaken the 'floating' problem. and built the discussion with another master Kang

(3)learn what the deep_learning subteam is doing quickly and ask for tasks to get more familiar with the content,  build my own CNN based on the understanding of the slide Mr Rod taught me about tensorflow and deep learning algorithm

(4)And most importantly, combine the knowledge I learnt on VIP and my image processing background, even though I could not participate in GTRI because I am not a US citizen, I get an offer from Canon.USA.lnc  as an intern lasting for six-months, the intern project's content is medical image processing using deep neural network. Hope I could enjoy it!