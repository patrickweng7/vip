'''A Priori-Based Tree Generating Algorithm'''

=== Motivation ===
A-Priori is a good algorithm to use for mining associations in large sets of data. A-Priori is implemented by a lot of libraries, including Pandas, making it easy to use. However, many of the graph-based A-Priori algorithms are complicated and would require a custom implementation.

In classic A-Priori you would represent associations of a data set and find the most common associations, but we canâ€™t simply list every node in a tree, or every path in a tree because order is not fully preserved and we will lose the parent-child relationship in the data representation.

Our solution to this it to label our associations with a specific parent node and make our associations the child nodes of each instance of that parent in the population. This way we can find the most common child set for any node and construct our trees with a top down approach, creating potentially unique trees that model a given population.

=== Example ===
Take the following set of nodes which make up the following population of four trees.
[[files/T-Priori Example.png|thumb|686x686px|Example population of tree individuals]]
Lets just focus on node A as our root. The set of transactions for node A would be the set of child nodes for each instance of A in each individual in our population.  Individual 1 would give us the transaction [D, C] because nodes D and C are both children of A. Individual 2 would give us transaction [B], Individual 3 would give us transaction [C], and individual 4 would give us [D, C]. This means our transaction matrix would be as follows:
{| class="wikitable"
|A
|B
|C
|D
|-
|
|
|X
|X
|-
|
|X
|
|
|-
|
|
|X
|
|-
|
|
|X
|X
|}
After this encoding we can find the most common set of children for an A node. To introduce an aspect of randomness we could randomly choose from the child-sets that have a support value above a certain threshold or that are of a certain length. Now we have a way to add children to node A whenever we are building a tree.

In order to build trees that consist other combinations than A and its children we would simply have to repeat this process for every node type in the population, creating a transaction dictionary, mapping nodes to their associated list of transactions. Then children could be made for each node in a tree. In practice every transaction list would be built in one iteration through every edge in the population, making the process of constructing these matrices O(kn), where n is the number of individuals and k is the average number of nodes in an individual.

=== Choosing a Root ===
Simply pick one at random with a likelihood proportional to the number of transactions in its transaction matrix. This way it is proportional to the number of times it was observed as a parent node in the population.

=== Terminating ===
We recommend a maximum depth or a maximum number of nodes in your trees. Otherwise you would have to rely on nodes that potentially had no viable children-sets to be chosen in order for your tree generation to terminate.

=== Pseudo-Code ===

==== Transaction Matrix Generation: ====
 transaction_dict <- Dictionary<Node, List<Dictionary<Node, Boolean>>>

 for each (tree in population):
   for each (node in tree):
     transaction <- Dictionary<Node>
     for each (child in node.children):
       transaction[child] <- true
       transaction_list[node].append(transaction)

==== Running A-Priori: ====
 # parameters
 gain_threshold
 Apriori_results <- Dictionary<Node, List<Tuple<String, double>>>
 for each (node, transactions in transaction_dict):
   Apriori_result <- Run_Apriori(transactions, gain_threshold)
 Apriori_results[node] <- Apriori_result

==== Choosing a Root Node: ====
 nodes <- transaction_dict.Keys
 node_probability <- List<double>
 total_transactions <- total # of transactions
 for each (node in nodes):
   probability <- len(transation_dict[node]) / total_transactions
   node_probability.append(probability)
 root_node <- rand_choice(population=nodes, distr=node_probabilities)

==== Selecting Children: ====
 # parameters
 support_threshold
 node <- input node
 Apriori_result <- Apriori_results[node]
 children_sets <- List<string>
 set_probabilities <- List<double>
 for each (children_set, support in Apriori_result):
   if (support > support_threshold):
     children_sets.append(children_set)
     set_probabilities.append(support)
 set_probabilities.normalize()
 children <- choice(population=children_sets, distr=set_probabilities)

==== Tree Generation: ====
 # parameters
 Max_node_depth
 Transaction_dict <- Generate_transation_dict()
 Apriori_results <- Run_Apriori(Transaction_dict)
 Root_node <- Select_root_node(transaction_dict)
 Next_nodes <- List<node>
 Current_nodes <- [Root_node]
 for each(i in Max_node_depth):
   for each(node in current_nodes):
     Node.children <- generate_children(node)
     Next_nodes.append_all(node.children)
   Current_nodes <- next_nodes
 # this would probably be implemented with recursion

=== Analysis ===

==== Memory: ====
The memory required for this process would be one Boolean for each edge in the population. Since trees contain one less edge than they do nodes, the space complexity would be O(kn) bytes where n is the number of individuals in the population and k is the average number of nodes in an individual.

==== Computation: ====
I think the A-priori algorithm has a time complexity of O(kn*log(kn)) where kn is the number of transactions. Since we have a total of kn transactions, but split amongst j node-types, we run A-Priori j times on kn/j transactions. the total time complexity is O(kn*log(kn/j)) making this roughly an O(n<sup>2</sup>log(n)) operation.

==== Concerns: ====
1)            If the dataset is too sparse to have multiple children candidates for a single node, then the tree generation my become deterministic resulting in repetitive trees.

2)            An extreme case of #1 is when a node is only seen as a leaf node, meaning it will have an empty transaction list. It will never be picked as a root node, but if it is a common child of other nodes then it may result in very short trees being generated. Node B in the example section is one instance of this.